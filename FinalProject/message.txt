
CREATE SCHEMA [Audit] AUTHORIZATION [dbo]
go

CREATE SCHEMA [Example] AUTHORIZATION [dbo]
go

CREATE SCHEMA [HumanResources] AUTHORIZATION [dbo]
go

CREATE SCHEMA [JsonOutput] AUTHORIZATION [dbo]
go

CREATE SCHEMA [Production] AUTHORIZATION [dbo]
go

CREATE SCHEMA [RelationalCalculii] AUTHORIZATION [dbo]
go

CREATE SCHEMA [RelationalCrossJoin] AUTHORIZATION [dbo]
go

CREATE SCHEMA [Sales] AUTHORIZATION [dbo]
go

CREATE SCHEMA [SystemVersioned] AUTHORIZATION [dbo]
go

CREATE SCHEMA [Temporal] AUTHORIZATION [dbo]
go

CREATE SCHEMA [Triggered] AUTHORIZATION [dbo]
go

CREATE SCHEMA [Udt] AUTHORIZATION [dbo]
go

CREATE SCHEMA [Utils] AUTHORIZATION [dbo]
go

CREATE SCHEMA [dGroup3Midterm]
go

CREATE SCHEMA [sdBlob]
go

CREATE SCHEMA [sdString]
go

CREATE SCHEMA [sdNumber]
go

CREATE SCHEMA [sdKey]
go

CREATE SCHEMA [sdIntegerNumber]
go

CREATE SCHEMA [sdDecimalNumber]
go

CREATE SCHEMA [sdBit]
go

CREATE SCHEMA [sdDatetime]
go

CREATE SCHEMA [SequenceIdInsert]
go

CREATE SCHEMA [sdDescription]
go

CREATE SCHEMA [sdName]
go

CREATE SCHEMA [sdTitle]
go

CREATE SCHEMA [sdFlagChar]
go

CREATE SCHEMA [DbSecurity]
go

CREATE SCHEMA [DigitRepresentation]
go

CREATE TYPE [sdString].[Address]
	FROM NVARCHAR(60) NULL
go

CREATE TYPE [sdName].[CategoryName]
	FROM NVARCHAR(40) NULL
go

CREATE TYPE [sdName].[CityName]
	FROM NVARCHAR(40) NULL
go

CREATE TYPE [sdName].[CompanyName]
	FROM NVARCHAR(50) NULL
go

CREATE TYPE [sdTitle].[RoleTitle]
	FROM NVARCHAR(30) NULL
go

CREATE TYPE [sdName].[CountryName]
	FROM NVARCHAR(40) NULL
go

CREATE TYPE [sdDecimalNumber].[Currency]
	FROM MONEY NULL
go

CREATE TYPE [sdDatetime].[DateYYYYMMDD]
	FROM DATE NOT NULL
go

CREATE TYPE [sdDescription].[LongDescription]
	FROM NVARCHAR(200) NULL
go

CREATE TYPE [sdName].[FirstName]
	FROM NVARCHAR(25) NULL
go

CREATE TYPE [sdBit].[FlagBit]
	FROM BIT NULL
go

CREATE TYPE [sdName].[LastName]
	FROM NVARCHAR(35) NULL
go

CREATE TYPE [sdString].[sdName]
	FROM NVARCHAR(40) NULL
go

CREATE TYPE [sdString].[Note]
	FROM NVARCHAR(200) NULL
go

CREATE TYPE [sdDecimalNumber].[Percentage]
	FROM NUMERIC(4,3) NULL
go

CREATE TYPE [sdString].[PostalCode]
	FROM CHAR(5) NULL
go

CREATE TYPE [sdName].[ProductName]
	FROM NVARCHAR(40) NULL
go

CREATE TYPE [sdIntegerNumber].[Quantity]
	FROM INTEGER NULL
go

CREATE TYPE [sdName].[RegionName]
	FROM NVARCHAR(30) NULL
go

CREATE TYPE [sdIntegerNumber].[SequenceNo]
	FROM INTEGER NULL
go

CREATE TYPE [sdKey].[SurrogateKeyInt]
	FROM INTEGER NULL
go

CREATE TYPE [sdString].[TelephoneNumber]
	FROM CHAR(10) NULL
go

CREATE TYPE [sdTitle].[TitleOfCourtesy]
	FROM VARCHAR(4) NOT NULL
go

CREATE TYPE [sdDatetime].[DateTimestamp]
	FROM DATETIME2 NOT NULL
go

CREATE TYPE [sdString].[TriggerOption]
	FROM CHAR(1) NOT NULL
go

CREATE TYPE [sdFlagChar].[IsDeletion]
	FROM CHAR(1) NOT NULL
go

CREATE TYPE [sdString].[sdFlagChar]
	FROM CHAR(1) NOT NULL
go

CREATE TYPE [dGroup3Midterm].[sdString]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [dGroup3Midterm].[sdDatetime]
	FROM DATETIME NULL
go

CREATE TYPE [dGroup3Midterm].[sdNumber]
	FROM INTEGER NULL
go

CREATE TYPE [sdNumber].[sdIntegerNumber]
	FROM INTEGER NULL
go

CREATE TYPE [sdNumber].[sdDecimalNumber]
	FROM DECIMAL(5,2) NULL
go

CREATE TYPE [dGroup3Midterm].[sdKey]
	FROM INTEGER NULL
go

CREATE TYPE [sdNumber].[sdBit]
	FROM BIT NULL
go

CREATE TYPE [dGroup3Midterm]
	FROM CHAR(18) NULL
go

CREATE TYPE [sdString].[sdDescription]
	FROM NVARCHAR(20) NULL
go

CREATE TYPE [sdName].[FullName]
	FROM NVARCHAR(60) NULL
go

CREATE TYPE [sdName].[DepartmentName]
	FROM NVARCHAR(25) NULL
go

CREATE TYPE [sdString].[sdTitle]
	FROM NVARCHAR(30) NULL
go

CREATE TYPE [sdString].[TimeOfDay]
	FROM NCHAR(5) NULL
go

CREATE TYPE [sdName].[ProjectName]
	FROM NVARCHAR(60) NULL
go

CREATE TYPE [sdName].[GroupName]
	FROM NVARCHAR(20) NULL
go

CREATE SEQUENCE [SequenceIdInsert].[HumanResources_Employee_EmployeeId] AS bigint
START WITH 100
INCREMENT BY 1
go

CREATE SEQUENCE [SequenceIdInsert].[Sales_Customer_CustomerId] AS bigint
START WITH 500
INCREMENT BY 1
go

CREATE SEQUENCE [SequenceIdInsert].[Sales_Shipper_ShipperId] AS bigint
START WITH 700
INCREMENT BY 1
go

CREATE SEQUENCE [SequenceIdInsert].[Production_Category_CategoryId] AS bigint
START WITH 200
INCREMENT BY 1
go

CREATE SEQUENCE [SequenceIdInsert].[Production_Supplier_SupplierId] AS bigint
START WITH 400
INCREMENT BY 1
go

CREATE SEQUENCE [SequenceIdInsert].[Production_Product_ProductId] AS bigint
START WITH 300
INCREMENT BY 1
go

CREATE SEQUENCE [SequenceIdInsert].[Sales_Order_OrderId] AS bigint
START WITH 600
INCREMENT BY 1
go

CREATE SEQUENCE [SequenceIdInsert].[DbSecurity_UserAuthorization_UserAuthorizationId] AS bigint
START WITH 800
INCREMENT BY 1
go

CREATE SEQUENCE [SequenceIdInsert].[Triggered_AuditTriggeredEmployeeHistory_TriggeredEmployeeHistoryId] AS bigint
START WITH 1000
INCREMENT BY 1
go

CREATE TABLE [Triggered].[AuditTriggeredEmployeeHistory]
( 
	[TriggeredEmployeeHistoryId] [sdKey].[SurrogateKeyInt]  NOT NULL 
	CONSTRAINT [DF_Triggered_AuditTriggeredEmployeeHistory_TriggeredEmployeeHistoryId]
		 DEFAULT  NEXT VALUE FOR [SequenceIdInsert].[Triggered_AuditTriggeredEmployeeHistory_TriggeredEmployeeHistoryId],
	[AuditTriggeredEmployeeHistoryTimestamp] [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Triggered_AuditTriggeredEmployeeHistory_AuditTriggeredEmployeeHistoryTimestamp]
		 DEFAULT  sysdatetime(),
	[TriggerOption]      [sdString].[TriggerOption]  NULL 
	CONSTRAINT [DF_Triggered_AuditTriggeredEmployeeHistory_TriggerOption]
		 DEFAULT  'U',
	[EmployeeId]         [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[EmployeeFullName]   [sdName].[FullName]  NOT NULL ,
	[Department]         [sdName].[DepartmentName]  NOT NULL ,
	[Salary]             [sdDecimalNumber].[Currency]  NOT NULL ,
	[Notes]              [sdString].[Note]  NOT NULL ,
	[IsDeleted]          [sdFlagChar].[IsDeletion]  NULL 
	CONSTRAINT [DF_Triggered_AuditTriggeredEmployeeHistory_IsDeleted]
		 DEFAULT  'N',
	[TransactionNumber]  [sdIntegerNumber].[SequenceNo]  NULL 
	CONSTRAINT [DF_Triggered_AuditTriggeredEmployeeHistory_TransactionNumber]
		 DEFAULT  1,
	[UserAuthenticatedKey] [sdKey].[SurrogateKeyInt]  NULL 
	CONSTRAINT [DF_Triggered_AuditTriggeredEmployeeHistory_UserAuthenticatedKey]
		 DEFAULT  37,
	[SysStartTime]       [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Triggered_AuditTriggeredEmployeeHistory_SysStartTime]
		 DEFAULT  sysdatetime(),
	[SysEndTime]         [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Triggered_AuditTriggeredEmployeeHistory_SysEndTime]
		 DEFAULT  '99991231',
	[TimestampRowChanged] [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Triggered_AuditTriggeredEmployeeHistory_TimestampRowChanged]
		 DEFAULT  sysdatetime(),
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Triggered_AuditTriggeredEmployeeHistory_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Triggered_AuditTriggeredEmployeeHistory_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for triggered employee history IDs.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'TriggeredEmployeeHistoryId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A timstamp for triggered employee history.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'AuditTriggeredEmployeeHistoryTimestamp'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A flag to indicate the trigger option.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'TriggerOption'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for employee IDs.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'EmployeeId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The full name of an employee.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'EmployeeFullName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The department name an employee works in.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'Department'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The salary of an employee',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'Salary'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'General notes.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'Notes'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A flag to indicate if the record was deleted.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'IsDeleted'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A transaction number.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'TransactionNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A key that symbolizes user authenication.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'UserAuthenticatedKey'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The start time of the system.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'SysStartTime'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The end time of a system.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'SysEndTime'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A timestamp to indicate when a row was changed.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'TimestampRowChanged'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'AuditTriggeredEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

CREATE TABLE [Production].[Category]
( 
	[CategoryId]         [sdKey].[SurrogateKeyInt]  NOT NULL 
	CONSTRAINT [DF_Production_Category_CategoryId]
		 DEFAULT  NEXT VALUE FOR [SequenceIdInsert].[Production_Category_CategoryId],
	[CategoryName]       [sdName].[CategoryName]  NOT NULL ,
	[Description]        [sdDescription].[LongDescription]  NOT NULL ,
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Production_Category_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Production_Category_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A classification of type for products.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Category'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for category IDs.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Category',
@level2type = 'COLUMN', @level2name = 'CategoryId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The name of a product category.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Category',
@level2type = 'COLUMN', @level2name = 'CategoryName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The description of a product''s category.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Category',
@level2type = 'COLUMN', @level2name = 'Description'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Category',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Category',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Category',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

CREATE TABLE [Sales].[Customer]
( 
	[CustomerId]         [sdKey].[SurrogateKeyInt]  NOT NULL 
	CONSTRAINT [DF_Sales_Customer_CustomerId]
		 DEFAULT  NEXT VALUE FOR [SequenceIdInsert].[Sales_Customer_CustomerId],
	[CustomerCompanyName] [sdName].[CompanyName]  NOT NULL ,
	[CustomerContactName] [sdName].[FullName]  NOT NULL ,
	[CustomerContactTitle] [sdTitle].[RoleTitle]  NOT NULL ,
	[CustomerAddress]    [sdString].[Address]  NOT NULL ,
	[CustomerCity]       [sdName].[CityName]  NOT NULL ,
	[CustomerRegion]     [sdName].[RegionName]  NULL ,
	[CustomerPostalCode] [sdString].[PostalCode]  NULL ,
	[CustomerCountry]    [sdName].[CountryName]  NOT NULL ,
	[CustomerPhoneNumber] [sdString].[TelephoneNumber]  NOT NULL ,
	[CustomerFaxNumber]  [sdString].[TelephoneNumber]  NULL ,
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Sales_Customer_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Sales_Customer_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A person or business entity that purchases Products.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'Unique identifier of customer IDs.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'CustomerId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The company name of a customer business.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'CustomerCompanyName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The full contact name of a customer.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'CustomerContactName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The title/role of customer contact.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'CustomerContactTitle'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The street address of a customer.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'CustomerAddress'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The city of a customer.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'CustomerCity'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The state/region of a customer.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'CustomerRegion'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The postal code of a customer.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'CustomerPostalCode'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The country of a customer.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'CustomerCountry'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The phone number of a customer.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'CustomerPhoneNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The fax number of a customer.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'CustomerFaxNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Customer',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

CREATE TABLE [HumanResources].[Employee]
( 
	[EmployeeId]         [sdKey].[SurrogateKeyInt]  NOT NULL 
	CONSTRAINT [DF_HumanResources_Employee_EmployeeId]
		 DEFAULT  NEXT VALUE FOR [SequenceIdInsert].[HumanResources_Employee_EmployeeId],
	[EmployeeLastName]   [sdName].[LastName]  NOT NULL ,
	[EmployeeFirstName]  [sdName].[FirstName]  NOT NULL ,
	[EmployeeTitle]      [sdTitle].[RoleTitle]  NOT NULL ,
	[EmployeeTitleOfCourtesy] [sdTitle].[TitleOfCourtesy]  NOT NULL ,
	[BirthDate]          [sdDatetime].[DateYYYYMMDD]  NOT NULL 
	CONSTRAINT [DF_HumanResources_Employee_Birthdate]
		 DEFAULT  '19000101',
	[HireDate]           [sdDatetime].[DateYYYYMMDD]  NOT NULL 
	CONSTRAINT [DF_HumanResources_Employee_HireDate]
		 DEFAULT  sysdatetime(),
	[EmployeeAddress]    [sdString].[Address]  NOT NULL ,
	[EmployeeCity]       [sdName].[CityName]  NULL ,
	[EmployeeRegion]     [sdName].[RegionName]  NULL ,
	[EmployeePostalCode] [sdString].[PostalCode]  NULL ,
	[EmployeeCountry]    [sdName].[CountryName]  NOT NULL ,
	[EmployeePhoneNumber] [sdString].[TelephoneNumber]  NOT NULL ,
	[EmployeeManagerId]  [sdKey].[SurrogateKeyInt]  NULL ,
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_HumanResources_Employee_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_HumanResources_Employee_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A person employed by the business that is responsible for processing orders.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for employee IDs.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The last name of an employee.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeLastName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The first name of an employee',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeFirstName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The title/role of an employee.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeTitle'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The title of courtesy of an employee.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeTitleOfCourtesy'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The birthdate of an employee.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'BirthDate'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The hiredate of an employee.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'HireDate'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The street address of an employee.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeAddress'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The city of an employee.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeCity'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The state/region of an employee.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeRegion'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The postal code of an employee.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeePostalCode'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The country of an employee.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeCountry'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The phone number of an employee.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeePhoneNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The identifier for an employee''s manager.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeManagerId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'HumanResources',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

CREATE TABLE [Triggered].[Employee]
( 
	[EmployeeId]         [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[EmployeeFullName]   [sdName].[FullName]  NOT NULL ,
	[Department]         [sdName].[DepartmentName]  NOT NULL ,
	[Salary]             [sdDecimalNumber].[Currency]  NOT NULL ,
	[Notes]              [sdString].[Note]  NOT NULL ,
	[IsDeleted]          [sdFlagChar].[IsDeletion]  NULL 
	CONSTRAINT [DF_Triggered_Employee_IsDeleted]
		 DEFAULT  'N',
	[TransactionNumber]  [sdIntegerNumber].[SequenceNo]  NULL 
	CONSTRAINT [DF_Triggered_Employee_TransactionNumber]
		 DEFAULT  1,
	[UserAuthenticatedKey] [sdKey].[SurrogateKeyInt]  NULL 
	CONSTRAINT [DF_Triggered_Employee_UserAuthenticatedKey]
		 DEFAULT  37,
	[SysStartTime]       [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Triggered_Employee_SysStartTime]
		 DEFAULT  sysdatetime(),
	[SysEndTime]         [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Triggered_Employee_SysEndTime]
		 DEFAULT  '99991231',
	[TimestampRowChanged] [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Triggered_Employee_TimestampRowChanged]
		 DEFAULT  sysdatetime(),
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Triggered_Employee_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Triggered_Employee_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for employee IDs.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The full name of an employee.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeFullName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The department name an employee works in.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'Department'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The salary of an employee.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'Salary'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'General notes.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'Notes'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A flag to indicate an entry was deleted.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'IsDeleted'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A transaction number.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'TransactionNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A key that symbolizes user authenication.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'UserAuthenticatedKey'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The start time of the system.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'SysStartTime'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The end time of the system.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'SysEndTime'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A timestamp when a row was changed.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'TimestampRowChanged'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'Triggered',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

CREATE TABLE [DigitRepresentation].[Nums]
( 
	[N]                  [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_DigitRepresentation_Nums_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_DigitRepresentation_Nums_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for Number.  Represents actual digits.',
@level0type = 'SCHEMA', @level0name = 'DigitRepresentation',
@level1type = 'TABLE', @level1name = 'Nums',
@level2type = 'COLUMN', @level2name = 'N'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'DigitRepresentation',
@level1type = 'TABLE', @level1name = 'Nums',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'DigitRepresentation',
@level1type = 'TABLE', @level1name = 'Nums',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'DigitRepresentation',
@level1type = 'TABLE', @level1name = 'Nums',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

CREATE TABLE [Sales].[Order]
( 
	[OrderId]            [sdKey].[SurrogateKeyInt]  NOT NULL 
	CONSTRAINT [DF_Sales_Order_OrderId]
		 DEFAULT  NEXT VALUE FOR [SequenceIdInsert].[Sales_Order_OrderId],
	[CustomerId]         [sdKey].[SurrogateKeyInt]  NULL ,
	[EmployeeId]         [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[ShipperId]          [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[OrderDate]          [sdDatetime].[DateYYYYMMDD]  NOT NULL 
	CONSTRAINT [DF_Sales_Orders_OrderDate]
		 DEFAULT  sysdatetime(),
	[RequiredDate]       [sdDatetime].[DateYYYYMMDD]  NOT NULL 
	CONSTRAINT [DF_Sales_Order_RequiredDate]
		 DEFAULT  sysdatetime(),
	[ShipToDate]         [sdDatetime].[DateYYYYMMDD]  NULL 
	CONSTRAINT [DF_Sales_Order_ShipToDate]
		 DEFAULT  sysdatetime(),
	[Freight]            [sdDecimalNumber].[Currency]  NOT NULL 
	CONSTRAINT [DF_Sales_Order_Freight]
		 DEFAULT  0,
	[ShipToName]         [sdName].[FullName]  NOT NULL ,
	[ShipToAddress]      [sdString].[Address]  NOT NULL ,
	[ShipToCity]         [sdName].[CityName]  NOT NULL ,
	[ShipToRegion]       [sdName].[RegionName]  NULL ,
	[ShipToPostalCode]   [sdString].[PostalCode]  NULL ,
	[ShipToCountry]      [sdName].[CountryName]  NOT NULL ,
	[DateAdded]          datetime2(7)  NULL 
	CONSTRAINT [DF_Sales_Order_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   datetime2(7)  NULL 
	CONSTRAINT [DF_Sales_Order_DateOfLastUpdate]
		 DEFAULT  sysdatetime(),
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL 
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'An order made by a customer.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier of order IDs.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'OrderId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'Unique identifier of customer IDs.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'CustomerId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for employee IDs.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'EmployeeId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for shipper IDs.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'ShipperId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date of an order.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'OrderDate'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an order is required by.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'RequiredDate'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an order is shipped to a customer.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'ShipToDate'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The cost of freight.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'Freight'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The name of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'ShipToName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The street address of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'ShipToAddress'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The city of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'ShipToCity'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The state/region of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'ShipToRegion'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The postal code of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'ShipToPostalCode'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The country of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'ShipToCountry'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Order',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

CREATE TABLE [Sales].[OrderDetail]
( 
	[OrderId]            [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[ProductId]          [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[UnitPrice]          [sdDecimalNumber].[Currency]  NOT NULL 
	CONSTRAINT [DF_Sales_OrderDetail_UnitPrice]
		 DEFAULT  0,
	[Quantity]           [sdIntegerNumber].[Quantity]  NOT NULL 
	CONSTRAINT [DF_Sales_OrderDetail_Quantity]
		 DEFAULT  1,
	[DiscountPercentage] [sdDecimalNumber].[Percentage]  NOT NULL 
	CONSTRAINT [DF_Sales_OrderDetail_DiscountPercentage]
		 DEFAULT  0,
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Sales_OrderDetail_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Sales_OrderDetail_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A description of the sales order made by a customer.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'OrderDetail'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for Order IDs.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'OrderDetail',
@level2type = 'COLUMN', @level2name = 'OrderId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for Product IDs.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'OrderDetail',
@level2type = 'COLUMN', @level2name = 'ProductId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The price per unit of a product purchased.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'OrderDetail',
@level2type = 'COLUMN', @level2name = 'UnitPrice'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The quantity of product purchased.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'OrderDetail',
@level2type = 'COLUMN', @level2name = 'Quantity'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A percentage of discount applied to the price of product purchased.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'OrderDetail',
@level2type = 'COLUMN', @level2name = 'DiscountPercentage'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'OrderDetail',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'OrderDetail',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'OrderDetail',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

CREATE TABLE [Production].[Product]
( 
	[ProductId]          [sdKey].[SurrogateKeyInt]  NOT NULL 
	CONSTRAINT [DF_Production_Product_ProductId]
		 DEFAULT  NEXT VALUE FOR [SequenceIdInsert].[Production_Product_ProductId],
	[ProductName]        [sdName].[ProductName]  NOT NULL ,
	[SupplierId]         [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[CategoryId]         [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[UnitPrice]          [sdDecimalNumber].[Currency]  NOT NULL 
	CONSTRAINT [DF_Production_Product_UnitPrice]
		 DEFAULT  0,
	[Discontinued]       [sdBit].[FlagBit]  NOT NULL 
	CONSTRAINT [DF_Production_Product_Discontinued]
		 DEFAULT  0,
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Production_Product_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Production_Product_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'An item that is sold by the business.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Product'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for Product IDs.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Product',
@level2type = 'COLUMN', @level2name = 'ProductId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The name of a product.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Product',
@level2type = 'COLUMN', @level2name = 'ProductName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for supplier IDs.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Product',
@level2type = 'COLUMN', @level2name = 'SupplierId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for category IDs.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Product',
@level2type = 'COLUMN', @level2name = 'CategoryId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The price per unit of a product.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Product',
@level2type = 'COLUMN', @level2name = 'UnitPrice'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A flag bit to indicate if a product has been discontinued.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Product',
@level2type = 'COLUMN', @level2name = 'Discontinued'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Product',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Product',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Product',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

CREATE TABLE [Sales].[Shipper]
( 
	[ShipperId]          [sdKey].[SurrogateKeyInt]  NOT NULL 
	CONSTRAINT [DF_Sales_Shipper_ShipperId]
		 DEFAULT  NEXT VALUE FOR [SequenceIdInsert].[Sales_Shipper_ShipperId],
	[ShipperCompanyName] [sdName].[CompanyName]  NOT NULL ,
	[PhoneNumber]        [sdString].[TelephoneNumber]  NOT NULL ,
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Sales_Shipper_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Sales_Shipper_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A business that is responsible for delivering purchased products.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Shipper'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for shipper IDs.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Shipper',
@level2type = 'COLUMN', @level2name = 'ShipperId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The name of the shipping company.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Shipper',
@level2type = 'COLUMN', @level2name = 'ShipperCompanyName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The phone number of the shipping company.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Shipper',
@level2type = 'COLUMN', @level2name = 'PhoneNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Shipper',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Shipper',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'Sales',
@level1type = 'TABLE', @level1name = 'Shipper',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

CREATE TABLE [Production].[Supplier]
( 
	[SupplierId]         [sdKey].[SurrogateKeyInt]  NOT NULL 
	CONSTRAINT [DF_Production_Supplier_SupplierId]
		 DEFAULT  NEXT VALUE FOR [SequenceIdInsert].[Production_Supplier_SupplierId],
	[SupplierCompanyName] [sdName].[CompanyName]  NOT NULL ,
	[SupplierContactName] [sdName].[FullName]  NOT NULL ,
	[SupplierContactTitle] [sdTitle].[RoleTitle]  NOT NULL ,
	[SupplierAddress]    [sdString].[Address]  NOT NULL ,
	[SupplierCity]       [sdName].[CityName]  NOT NULL ,
	[SupplierRegion]     [sdName].[RegionName]  NULL ,
	[SupplierPostalCode] [sdString].[PostalCode]  NULL ,
	[SupplierCountry]    [sdName].[CountryName]  NOT NULL ,
	[SupplierPhoneNumber] [sdString].[TelephoneNumber]  NOT NULL ,
	[SupplierFaxNumber]  [sdString].[TelephoneNumber]  NULL ,
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Production_Supplier_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Production_Supplier_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A company that is responsible for supplying the inventory of specific products.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for supplier IDs.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'SupplierId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The company name of a supplier.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'SupplierCompanyName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The full name of a contact at the supplier company.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'SupplierContactName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The title of a contact at the supplier company.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'SupplierContactTitle'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The street address of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'SupplierAddress'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The city of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'SupplierCity'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The state/region of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'SupplierRegion'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The postal code of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'SupplierPostalCode'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The country of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'SupplierCountry'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The phone number of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'SupplierPhoneNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The fax number of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'SupplierFaxNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'Production',
@level1type = 'TABLE', @level1name = 'Supplier',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

CREATE TABLE [DbSecurity].[UserAuthorization]
( 
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL 
	CONSTRAINT [DF_DbSecurity_UserAuthorization_UserAuthorizationId]
		 DEFAULT  NEXT VALUE FOR [SequenceIdInsert].[DbSecurity_UserAuthorization_UserAuthorizationId],
	[ClassTime]          [sdString].[TimeOfDay] 
	CONSTRAINT [DF_DbSecurity_UserAuthorization_ClassTime]
		 DEFAULT  '10:45',
	[IndividualProject]  [sdName].[ProjectName] 
	CONSTRAINT [DF_DbSecurity_UserAuthorization_IndividualProject]
		 DEFAULT  'CSCI381 Midterm Project',
	[GroupMemberLastName] [sdName].[LastName]  NOT NULL ,
	[GroupMemberFirstName] [sdName].[FirstName]  NOT NULL ,
	[GroupName]          [sdName].[GroupName]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_DbSecurity_UserAuthorization_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_DbSecurity_UserAuthorization_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'Authorization of transaction by a user.',
@level0type = 'SCHEMA', @level0name = 'DbSecurity',
@level1type = 'TABLE', @level1name = 'UserAuthorization'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'DbSecurity',
@level1type = 'TABLE', @level1name = 'UserAuthorization',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The class time for CSCI-381 Data Modeling.',
@level0type = 'SCHEMA', @level0name = 'DbSecurity',
@level1type = 'TABLE', @level1name = 'UserAuthorization',
@level2type = 'COLUMN', @level2name = 'ClassTime'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The name of the individual project.',
@level0type = 'SCHEMA', @level0name = 'DbSecurity',
@level1type = 'TABLE', @level1name = 'UserAuthorization',
@level2type = 'COLUMN', @level2name = 'IndividualProject'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A group member''s last name.',
@level0type = 'SCHEMA', @level0name = 'DbSecurity',
@level1type = 'TABLE', @level1name = 'UserAuthorization',
@level2type = 'COLUMN', @level2name = 'GroupMemberLastName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A group member''s first name.',
@level0type = 'SCHEMA', @level0name = 'DbSecurity',
@level1type = 'TABLE', @level1name = 'UserAuthorization',
@level2type = 'COLUMN', @level2name = 'GroupMemberFirstName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The group''s name.',
@level0type = 'SCHEMA', @level0name = 'DbSecurity',
@level1type = 'TABLE', @level1name = 'UserAuthorization',
@level2type = 'COLUMN', @level2name = 'GroupName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'DbSecurity',
@level1type = 'TABLE', @level1name = 'UserAuthorization',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'DbSecurity',
@level1type = 'TABLE', @level1name = 'UserAuthorization',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

CREATE TABLE [Audit].[VersionedEmployeeHistory]
( 
	[EmployeeId]         [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[EmployeeFullName]   [sdName].[FullName]  NOT NULL ,
	[Department]         [sdName].[DepartmentName]  NOT NULL ,
	[Salary]             [sdDecimalNumber].[Currency]  NOT NULL ,
	[Notes]              [sdString].[Note]  NOT NULL ,
	[SysStart]           [sdDatetime].[DateTimestamp]  NOT NULL 
	CONSTRAINT [DF_Audit_VersionedEmployeeHistory_SysStart]
		 DEFAULT  sysdatetime(),
	[SysEnd]             [sdDatetime].[DateTimestamp]  NOT NULL 
	CONSTRAINT [DF_Audit_VersionedEmployeeHistory_SysEnd]
		 DEFAULT  '99991231',
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Audit_VersionedEmployeeHistory_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_Audit_VersionedEmployeeHistory_DateOfLastUpdate]
		 DEFAULT  sysdatetime()
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'a unique identifier for employee IDs.',
@level0type = 'SCHEMA', @level0name = 'Audit',
@level1type = 'TABLE', @level1name = 'VersionedEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'EmployeeId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The full name of an employee.',
@level0type = 'SCHEMA', @level0name = 'Audit',
@level1type = 'TABLE', @level1name = 'VersionedEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'EmployeeFullName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The department name an employee works in.',
@level0type = 'SCHEMA', @level0name = 'Audit',
@level1type = 'TABLE', @level1name = 'VersionedEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'Department'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The salary of an employee.',
@level0type = 'SCHEMA', @level0name = 'Audit',
@level1type = 'TABLE', @level1name = 'VersionedEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'Salary'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'General notes.',
@level0type = 'SCHEMA', @level0name = 'Audit',
@level1type = 'TABLE', @level1name = 'VersionedEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'Notes'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The start time of the system.',
@level0type = 'SCHEMA', @level0name = 'Audit',
@level1type = 'TABLE', @level1name = 'VersionedEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'SysStart'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The end time of the system.',
@level0type = 'SCHEMA', @level0name = 'Audit',
@level1type = 'TABLE', @level1name = 'VersionedEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'SysEnd'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'Audit',
@level1type = 'TABLE', @level1name = 'VersionedEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'Audit',
@level1type = 'TABLE', @level1name = 'VersionedEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'Audit',
@level1type = 'TABLE', @level1name = 'VersionedEmployeeHistory',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

ALTER TABLE [Triggered].[AuditTriggeredEmployeeHistory]
	ADD CONSTRAINT [PK_TriggeredEmployeeHistoryId] PRIMARY KEY  NONCLUSTERED ([TriggeredEmployeeHistoryId] ASC)
go

CREATE UNIQUE CLUSTERED INDEX [ix_Employees] ON [Triggered].[AuditTriggeredEmployeeHistory]
( 
	[EmployeeId]          ASC,
	[SysStartTime]        ASC,
	[SysEndTime]          ASC,
	[TriggeredEmployeeHistoryId]  ASC
)
go

ALTER TABLE [Production].[Category]
	ADD CONSTRAINT [PK_Categories] PRIMARY KEY  CLUSTERED ([CategoryId] ASC)
go

ALTER TABLE [Sales].[Customer]
	ADD CONSTRAINT [PK_Customers] PRIMARY KEY  CLUSTERED ([CustomerId] ASC)
go

ALTER TABLE [HumanResources].[Employee]
	ADD CONSTRAINT [PK_Employees] PRIMARY KEY  CLUSTERED ([EmployeeId] ASC)
go

CREATE TABLE [SystemVersioned].[Employee]
( 
	[EmployeeId]         [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[EmployeeFullName]   [sdName].[FullName]  NOT NULL ,
	[Department]         [sdName].[DepartmentName]  NOT NULL ,
	[Salary]             [sdDecimalNumber].[Currency]  NOT NULL ,
	[Notes]              [sdString].[Note]  NOT NULL ,
	[SysStart]           [sdDatetime].[DateTimestamp]  GENERATED ALWAYS AS ROW START HIDDEN  NOT NULL 
	CONSTRAINT [DF_SystemVersioned_Employee_SysStart]
		 DEFAULT  '19000101',
	[SysEnd]             [sdDatetime].[DateTimestamp]  GENERATED ALWAYS AS ROW END HIDDEN  NOT NULL 
	CONSTRAINT [DF_SystemVersioned_Employee_SysEnd]
		 DEFAULT  '99991231',
	[UserAuthorizationId] [sdKey].[SurrogateKeyInt]  NOT NULL ,
	[DateAdded]          [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_SystemVersioned_Employee_DateAdded]
		 DEFAULT  sysdatetime(),
	[DateOfLastUpdate]   [sdDatetime].[DateTimestamp]  NULL 
	CONSTRAINT [DF_SystemVersioned_Employee_DateOfLastUpdate]
		 DEFAULT  sysdatetime(),
	CONSTRAINT [PK_EmployeeVersioned] PRIMARY KEY  NONCLUSTERED ([EmployeeId] ASC),
	PERIOD FOR SYSTEM_TIME (SysStart,SysEnd)
)
WITH 
(
	SYSTEM_VERSIONING = ON (HISTORY_TABLE = [Audit].[VersionedEmployeeHistory], DATA_CONSISTENCY_CHECK = OFF)
)
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for employee IDs.',
@level0type = 'SCHEMA', @level0name = 'SystemVersioned',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The full name of an employee.',
@level0type = 'SCHEMA', @level0name = 'SystemVersioned',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'EmployeeFullName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The department name an employee works in.',
@level0type = 'SCHEMA', @level0name = 'SystemVersioned',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'Department'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The salary of an employee.',
@level0type = 'SCHEMA', @level0name = 'SystemVersioned',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'Salary'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'General notes.',
@level0type = 'SCHEMA', @level0name = 'SystemVersioned',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'Notes'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The start time of the system.',
@level0type = 'SCHEMA', @level0name = 'SystemVersioned',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'SysStart'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The end time of the system.',
@level0type = 'SCHEMA', @level0name = 'SystemVersioned',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'SysEnd'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for user authorization IDs.',
@level0type = 'SCHEMA', @level0name = 'SystemVersioned',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'UserAuthorizationId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was added.',
@level0type = 'SCHEMA', @level0name = 'SystemVersioned',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'DateAdded'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an entry was last updated.',
@level0type = 'SCHEMA', @level0name = 'SystemVersioned',
@level1type = 'TABLE', @level1name = 'Employee',
@level2type = 'COLUMN', @level2name = 'DateOfLastUpdate'
go

ALTER TABLE [Triggered].[Employee]
	ADD CONSTRAINT [PK_TriggeredEmployee] PRIMARY KEY  NONCLUSTERED ([EmployeeId] ASC)
go

CREATE CLUSTERED INDEX [ix_Employees] ON [Triggered].[Employee]
( 
	[SysStartTime]        ASC,
	[SysEndTime]          ASC,
	[EmployeeId]          ASC
)
go

ALTER TABLE [DigitRepresentation].[Nums]
	ADD CONSTRAINT [PK_Nums] PRIMARY KEY  CLUSTERED ([N] ASC)
go

ALTER TABLE [Sales].[Order]
	ADD CONSTRAINT [PK_Orders] PRIMARY KEY  CLUSTERED ([OrderId] ASC)
go

ALTER TABLE [Sales].[OrderDetail]
	ADD CONSTRAINT [PK_OrderDetails] PRIMARY KEY  CLUSTERED ([OrderId] ASC,[ProductId] ASC)
go

ALTER TABLE [Production].[Product]
	ADD CONSTRAINT [PK_Products] PRIMARY KEY  CLUSTERED ([ProductId] ASC)
go

ALTER TABLE [Sales].[Shipper]
	ADD CONSTRAINT [PK_Shippers] PRIMARY KEY  CLUSTERED ([ShipperId] ASC)
go

ALTER TABLE [Production].[Supplier]
	ADD CONSTRAINT [PK_Suppliers] PRIMARY KEY  CLUSTERED ([SupplierId] ASC)
go

ALTER TABLE [DbSecurity].[UserAuthorization]
	ADD CONSTRAINT [XPKUserAuthorization] PRIMARY KEY  CLUSTERED ([UserAuthorizationId] ASC)
go

CREATE CLUSTERED INDEX [ix_VersionedEmployeeHistory] ON [Audit].[VersionedEmployeeHistory]
( 
	[SysEnd]              ASC,
	[SysStart]            ASC
)
go

CREATE VIEW [JsonOutput].[uvw_HumanResourcesEmployee]([EmployeeObjectId],[EmployeeLastName],[EmployeeFirstName],[EmployeeTitle],[EmployeeTitleOfCourtesy],[BirthDate],[HireDate],[EmployeeAddress],[EmployeeCity],[EmployeeRegion],[EmployeePostalCode],[EmployeeCountry],[EmployeePhoneNumber],[EmployeeManagerId])
AS
SELECT E.[EmployeeId],E.[EmployeeLastName],E.[EmployeeFirstName],E.[EmployeeTitle],E.[EmployeeTitleOfCourtesy],E.[BirthDate],E.[HireDate],E.[EmployeeAddress],E.[EmployeeCity],E.[EmployeeRegion],E.[EmployeePostalCode],E.[EmployeeCountry],E.[EmployeePhoneNumber],E.[EmployeeManagerId]
	FROM [HumanResources].[Employee] E
go

CREATE VIEW [JsonOutput].[uvw_ProductionCategory]([CategoryObjectId],[CategoryName],[Description])
AS
SELECT [Production].[Category].[CategoryId],[Production].[Category].[CategoryName],[Production].[Category].[Description]
	FROM [Production].[Category]
go

CREATE VIEW [JsonOutput].[uvw_ProductionProduct] 
 AS 
 SELECT P.ProductId AS ProductObjectId, P.ProductName, P.SupplierId, P.CategoryId, P.UnitPrice, P.Discontinued, C.CategoryId AS "Production.CategoryObjectId", C.CategoryName AS "Production.CategoryName", C.Description AS "Production.Description", S.SupplierId AS "Production.SupplierId", S.SupplierCompanyName AS "Production.SupplierCompanyName", S.SupplierContactName AS "Production.SupplierContactName", S.SupplierPhoneNumber AS "Production.SupplierPhoneNumber", S.SupplierFaxNumber AS "Production.SupplierFaxNumber" 
 FROM Production.Product AS P   
 INNER JOIN   Production.Category AS C 
 ON C.CategoryId = P.CategoryId   
 INNER JOIN   Production.Supplier AS S 
 ON S.SupplierId = P.SupplierId
go
go

CREATE VIEW [JsonOutput].[uvw_ProductionSupplier]([SupplierObjectId],[SupplierCompanyName],[SupplierContactName],[SupplierContactTitle],[SupplierAddress],[SupplierCity],[SupplierRegion],[SupplierPostalCode],[SupplierCountry],[SupplierPhoneNumber],[SupplierFaxNumber])
AS
SELECT S.[SupplierId],S.[SupplierCompanyName],S.[SupplierContactName],S.[SupplierContactTitle],S.[SupplierAddress],S.[SupplierCity],S.[SupplierRegion],S.[SupplierPostalCode],S.[SupplierCountry],S.[SupplierPhoneNumber],S.[SupplierFaxNumber]
	FROM [Production].[Supplier] S
go

CREATE VIEW [JsonOutput].[uvw_SalesCustomer]([CustomerObjectId],[CustomerCompanyName],[CustomerContactName],[CustomerContactTitle],[CustomerAddress],[CustomerCity],[CustomerRegion],[CustomerPostalCode],[CustomerCountry],[CustomerPhoneNumber],[CustomerFaxNumber])
AS
SELECT C.[CustomerId],C.[CustomerCompanyName],C.[CustomerContactName],C.[CustomerContactTitle],C.[CustomerAddress],C.[CustomerCity],C.[CustomerRegion],C.[CustomerPostalCode],C.[CustomerCountry],C.[CustomerPhoneNumber],C.[CustomerFaxNumber]
	FROM [Sales].[Customer] C
go

CREATE VIEW [JsonOutput].[uvw_SalesShipper]([ShipperObjectId],[ShipperCompanyName],[PhoneNumber])
AS
SELECT S.[ShipperId],S.[ShipperCompanyName],S.[PhoneNumber]
	FROM [Sales].[Shipper] S
go

CREATE VIEW [JsonOutput].[uvw_Order]([OrderId],[CustomerId],[EmployeeId],[ShipperId],[OrderDate],[RequiredDate],[ShipToDate],[Freight],[ShipToName],[ShipToAddress],[ShipToCity],[ShipToRegion],[ShipToPostalCode],[ShipToCountry])
AS
SELECT O.[OrderId],O.[CustomerId],O.[EmployeeId],O.[ShipperId],O.[OrderDate],O.[RequiredDate],O.[ShipToDate],O.[Freight],O.[ShipToName],O.[ShipToAddress],O.[ShipToCity],O.[ShipToRegion],O.[ShipToPostalCode],O.[ShipToCountry]
	FROM [Sales].[Order] O
go

CREATE VIEW [JsonOutput].[uvw_OrderDetail]([OrderId],[ProductId],[UnitPrice],[Quantity],[DiscountPercentage])
AS
SELECT OD.[OrderId],OD.[ProductId],OD.[UnitPrice],OD.[Quantity],OD.[DiscountPercentage]
	FROM [Sales].[OrderDetail] OD
go

CREATE VIEW [Utils].[uvw_FindColumnDefinitionPlusDefaultAndCheckConstraint] AS  SELECT  concat( tbl.TABLE_SCHEMA , '.' , tbl.TABLE_NAME )  AS FullyQualifiedTableName, tbl.TABLE_SCHEMA AS SchemaName, tbl.TABLE_NAME AS TableName, col.COLUMN_NAME AS ColumnName, col.ORDINAL_POSITION AS OrdinalPosition,  concat( col.DOMAIN_SCHEMA , '.' , col.DOMAIN_NAME )  AS FullyQualifiedDomainName, col.DOMAIN_NAME AS DomainName, CASE WHEN col.DATA_TYPE = 'varchar' THEN  concat( 'varchar(' , CHARACTER_MAXIMUM_LENGTH , ')' )  WHEN col.DATA_TYPE = 'char' THEN  concat( 'char(' , CHARACTER_MAXIMUM_LENGTH , ')' )  WHEN col.DATA_TYPE = 'nvarchar' THEN  concat( 'nvarchar(' , CHARACTER_MAXIMUM_LENGTH , ')' )  WHEN col.DATA_TYPE = 'nchar' THEN  concat( 'nchar(' , CHARACTER_MAXIMUM_LENGTH , ')' )  WHEN col.DATA_TYPE = 'numeric' THEN  concat( 'numeric(' , NUMERIC_PRECISION_RADIX , ', ' , NUMERIC_SCALE , ')' )  WHEN col.DATA_TYPE = 'decimal' THEN  concat( 'decimal(' , NUMERIC_PRECISION_RADIX , ', ' , NUMERIC_SCALE , ')' )  ELSE col.DATA_TYPE END AS DataType, col.IS_NULLABLE AS IsNullable, dcn.DefaultName, col.COLUMN_DEFAULT AS DefaultNameDefinition, cc.CONSTRAINT_NAME AS CheckConstraintRuleName, cc.CHECK_CLAUSE AS CheckConstraintRuleNameDefinition FROM (  SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE FROM INFORMATION_SCHEMA.TABLES WHERE ( TABLE_TYPE = 'BASE TABLE' ) ) AS tbl    INNER JOIN   (  SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, COLUMN_DEFAULT, IS_NULLABLE, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX, NUMERIC_SCALE, DATETIME_PRECISION, CHARACTER_SET_CATALOG, CHARACTER_SET_SCHEMA, CHARACTER_SET_NAME, COLLATION_CATALOG, COLLATION_SCHEMA, COLLATION_NAME, DOMAIN_CATALOG, DOMAIN_SCHEMA, DOMAIN_NAME FROM INFORMATION_SCHEMA.COLUMNS ) AS col  ON col.TABLE_CATALOG = tbl.TABLE_CATALOG AND col.TABLE_SCHEMA = tbl.TABLE_SCHEMA AND col.TABLE_NAME = tbl.TABLE_NAME   LEFT OUTER JOIN   (  SELECT t.name AS TableName,  schema_name( s.schema_id )  AS SchemaName, ac.name AS ColumnName, d.name AS DefaultName FROM sys.all_columns AS ac   INNER JOIN   sys.tables AS t ON ac.object_id = t.object_id   INNER JOIN   sys.schemas AS s ON t.schema_id = s.schema_id   INNER JOIN   sys.default_constraints AS d ON ac.default_object_id = d.object_id ) AS dcn  ON dcn.SchemaName = tbl.TABLE_SCHEMA AND dcn.TableName = tbl.TABLE_NAME AND dcn.ColumnName = col.COLUMN_NAME   LEFT OUTER JOIN   (  SELECT cu.TABLE_CATALOG, cu.TABLE_SCHEMA, cu.TABLE_NAME, cu.COLUMN_NAME, c.CONSTRAINT_CATALOG, c.CONSTRAINT_SCHEMA, c.CONSTRAINT_NAME, c.CHECK_CLAUSE FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS cu   INNER JOIN   INFORMATION_SCHEMA.CHECK_CONSTRAINTS AS c ON c.CONSTRAINT_NAME = cu.CONSTRAINT_NAME ) AS cc  ON cc.TABLE_SCHEMA = tbl.TABLE_SCHEMA AND cc.TABLE_NAME = tbl.TABLE_NAME AND cc.COLUMN_NAME = col.COLUMN_NAME
go

CREATE VIEW [Utils].[uw_FindAllDatabaseColumnsOnTheServer]([FullyQualifiedTableName],[SchemaName],[ColumnName],[OrdinalPosition],[FullyQualifiedDomainName],[DataType],[IsNullable],[DefaultName],[DefaultNameDefinition],[CheckConstraintRuleName],[CheckConstraintRuleNameDefinition],[Server_Name],[Target_Database_Version],[Instance_Name],[Database_Name],[Host_Name])
AS
SELECT vw.FullyQualifiedTableName,vw.SchemaName,vw.ColumnName,vw.OrdinalPosition,vw.FullyQualifiedDomainName,vw.DataType,vw.IsNullable,vw.DefaultName,vw.DefaultNameDefinition,vw.CheckConstraintRuleName,vw.CheckConstraintRuleNameDefinition,@@servername,@@version,@@servicename,db_name(),host_name()
	FROM [Utils].[uvw_FindColumnDefinitionPlusDefaultAndCheckConstraint] vw
		WHERE vw.SchemaName IN ('Sales' , 'Production' , 'HumanResources')
go


ALTER TABLE [Triggered].[AuditTriggeredEmployeeHistory]
	ADD CONSTRAINT [CK_Triggered_AuditTriggeredEmployeeHistory_SysStartTime]
		CHECK  ( SysEndTime >= SysStartTime ) 
go

ALTER TABLE [Triggered].[AuditTriggeredEmployeeHistory]
	ADD CONSTRAINT [CK_Triggered_AuditTriggeredEmployeeHistory_SysEndTime]
		CHECK  ( SysEndTime >= SysStartTime ) 
go

ALTER TABLE [Triggered].[AuditTriggeredEmployeeHistory]
	ADD CONSTRAINT [CK_Triggered_AuditTriggeredEmployeeHistory_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [Triggered].[AuditTriggeredEmployeeHistory]
	ADD CONSTRAINT [CK_Triggered_AuditTriggeredEmployeeHistory_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [Triggered].[AuditTriggeredEmployeeHistory]
	ADD CONSTRAINT [FK_Triggered.AuditTriggeredEmployeeHistory_DbSecurity.UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Triggered].[AuditTriggeredEmployeeHistory]
	ADD CONSTRAINT [FK_Triggered.AuditTriggeredEmployeeHistory_HumanResources.Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [HumanResources].[Employee]([EmployeeId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Production].[Category]
	ADD CONSTRAINT [CK_Production_Category_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [Production].[Category]
	ADD CONSTRAINT [CK_Production_Category_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [Production].[Category]
	ADD CONSTRAINT [FK_Production.Category_DbSecurity.UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Sales].[Customer]
	 WITH CHECK ADD CONSTRAINT [CK_Sales_Customer_CustomerPostalCode]
		CHECK  ( [CustomerPostalCode] LIKE '[0-9][0-9][0-9][0-9][0-9]'
 ) 
go

ALTER TABLE [Sales].[Customer]
	ADD CONSTRAINT [CK_Sales_Customer_CustomerPhoneNumber]
		CHECK  ( [CustomerPhoneNumber] LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' ) 
go

ALTER TABLE [Sales].[Customer]
	ADD CONSTRAINT [CK_Sales_Customer_CustomerFaxNumber]
		CHECK  ( [CustomerFaxNumber] LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' ) 
go

ALTER TABLE [Sales].[Customer]
	ADD CONSTRAINT [CK_Sales_Customer_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [Sales].[Customer]
	ADD CONSTRAINT [CK_Sales_Customer_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [Sales].[Customer]
	ADD CONSTRAINT [FK_Customer_UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [HumanResources].[Employee]
	ADD CONSTRAINT [CK_HumanResources_Employee_EmployeeTitleOfCourtesy]
		CHECK  ( [EmployeeTitleOfCourtesy]='Mr.' OR [EmployeeTitleOfCourtesy]='Ms.' OR [EmployeeTitleOfCourtesy]='Mrs.' OR [EmployeeTitleOfCourtesy]='Dr.' OR [EmployeeTitleOfCourtesy]= NULL ) 
go

ALTER TABLE [HumanResources].[Employee]
	 WITH CHECK ADD CONSTRAINT [CK_HumanResources_Employee_Birthdate]
		CHECK  ( [BirthDate] BETWEEN '19000101' AND sysdatetime() ) 
go

ALTER TABLE [HumanResources].[Employee]
	ADD CONSTRAINT [CK_HumanResources_Employee_HireDate]
		CHECK  ( [HireDate] BETWEEN '19000101' AND '99991231' ) 
go

ALTER TABLE [HumanResources].[Employee]
	ADD CONSTRAINT [CK_HumanResources_Employee_EmployeePostalCode]
		CHECK  ( [EmployeePostalCode] LIKE '[0-9][0-9][0-9][0-9][0-9]'
 ) 
go

ALTER TABLE [HumanResources].[Employee]
	ADD CONSTRAINT [CK_HumanResources_Employee_EmployeePhoneNumber]
		CHECK  ( [EmployeePhoneNumber] LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' ) 
go

ALTER TABLE [HumanResources].[Employee]
	ADD CONSTRAINT [CK_HumanResources_Employee_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [HumanResources].[Employee]
	ADD CONSTRAINT [CK_HumanResources_Employee_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [HumanResources].[Employee] WITH CHECK 
	ADD CONSTRAINT [FK_Employee_Employee] FOREIGN KEY ([EmployeeManagerId]) REFERENCES [HumanResources].[Employee]([EmployeeId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [HumanResources].[Employee]
	  WITH CHECK CHECK CONSTRAINT [FK_Employee_Employee]
go

ALTER TABLE [HumanResources].[Employee]
	ADD CONSTRAINT [FK_HumanResources.Employee_DbSecurity.UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [SystemVersioned].[Employee]
	ADD CONSTRAINT [CK_SystemVersioned_Employee_SysStart]
		CHECK  ( SysEnd >= SysStart ) 
go

ALTER TABLE [SystemVersioned].[Employee]
	ADD CONSTRAINT [CK_SystemVersioned_Employee_SysEnd]
		CHECK  ( SysEnd >= SysStart ) 
go

ALTER TABLE [SystemVersioned].[Employee]
	ADD CONSTRAINT [CK_SystemVersioned_Employee_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [SystemVersioned].[Employee]
	ADD CONSTRAINT [CK_SystemVersioned_Employee_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [SystemVersioned].[Employee]
	ADD CONSTRAINT [FK_SystemVersionedEmployee_DbSecurity.UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SystemVersioned].[Employee]
	ADD CONSTRAINT [FK_SystemVersionedEmployee_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [HumanResources].[Employee]([EmployeeId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Triggered].[Employee]
	ADD CONSTRAINT [CK_Triggered_Employee_SysStartTime]
		CHECK  ( SysEndTime >= SysStartTime ) 
go

ALTER TABLE [Triggered].[Employee]
	ADD CONSTRAINT [CK_Triggered_Employee_SysEndTime]
		CHECK  ( SysEndTime >= SysStartTime ) 
go

ALTER TABLE [Triggered].[Employee]
	ADD CONSTRAINT [CK_Triggered_Employee_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [Triggered].[Employee]
	ADD CONSTRAINT [CK_Triggered_Employee_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [Triggered].[Employee]
	ADD CONSTRAINT [FK_TriggeredEmployee_DbSecurity.UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Triggered].[Employee]
	ADD CONSTRAINT [FK_TriggeredEmployee_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [HumanResources].[Employee]([EmployeeId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [DigitRepresentation].[Nums]
	ADD CONSTRAINT [CK_DigitRepresentation_Nums_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [DigitRepresentation].[Nums]
	ADD CONSTRAINT [CK_DigitRepresentation_Nums_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [DigitRepresentation].[Nums]
	ADD CONSTRAINT [FK_DigitRepresentation.Nums_DbSecurity.UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Sales].[Order]
	ADD CONSTRAINT [CK_Sales_Orders_OrderDate]
		CHECK  ( RequiredDate >= OrderDate ) 
go

ALTER TABLE [Sales].[Order]
	ADD CONSTRAINT [CK_Sales_Order_RequiredDate]
		CHECK  ( RequiredDate >= OrderDate ) 
go

ALTER TABLE [Sales].[Order]
	ADD CONSTRAINT [CK_Sales_Order_ShipToDate]
		CHECK  ( ShipToDate >= OrderDate ) 
go

ALTER TABLE [Sales].[Order]
	ADD CONSTRAINT [CK_Sales_Order_ShipToPostalCode]
		CHECK  ( [ShipToPostalCode] LIKE '[0-9][0-9][0-9][0-9][0-9]'
 ) 
go

ALTER TABLE [Sales].[Order]
	ADD CONSTRAINT [CK_Sales_Order_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [Sales].[Order]
	ADD CONSTRAINT [CK_Sales_Order_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [Sales].[Order] WITH CHECK 
	ADD CONSTRAINT [FK_Order_Customer] FOREIGN KEY ([CustomerId]) REFERENCES [Sales].[Customer]([CustomerId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Sales].[Order]
	  WITH CHECK CHECK CONSTRAINT [FK_Order_Customer]
go

ALTER TABLE [Sales].[Order] WITH CHECK 
	ADD CONSTRAINT [FK_Order_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [HumanResources].[Employee]([EmployeeId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Sales].[Order]
	  WITH CHECK CHECK CONSTRAINT [FK_Order_Employee]
go

ALTER TABLE [Sales].[Order] WITH CHECK 
	ADD CONSTRAINT [FK_Order_Shipper] FOREIGN KEY ([ShipperId]) REFERENCES [Sales].[Shipper]([ShipperId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Sales].[Order]
	  WITH CHECK CHECK CONSTRAINT [FK_Order_Shipper]
go

ALTER TABLE [Sales].[Order]
	ADD CONSTRAINT [FK_Sales.Order_DbSecurity.UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Sales].[OrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_Sales_OrderDetail_Quantity]
		CHECK  ( [Quantity] > 0 ) 
go

ALTER TABLE [Sales].[OrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_Sales_OrderDetail_DiscountPercentage]
		CHECK  ( [DiscountPercentage] BETWEEN 0 AND 1 ) 
go

ALTER TABLE [Sales].[OrderDetail]
	ADD CONSTRAINT [CK_Sales_OrderDetail_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [Sales].[OrderDetail]
	ADD CONSTRAINT [CK_Sales_OrderDetail_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [Sales].[OrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_OrderDetail_Order] FOREIGN KEY ([OrderId]) REFERENCES [Sales].[Order]([OrderId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Sales].[OrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_OrderDetail_Order]
go

ALTER TABLE [Sales].[OrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_OrderDetail_Product] FOREIGN KEY ([ProductId]) REFERENCES [Production].[Product]([ProductId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Sales].[OrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_OrderDetail_Product]
go

ALTER TABLE [Sales].[OrderDetail]
	ADD CONSTRAINT [FK_Sales.OrderDetail_DbSecurity.UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Production].[Product]
	 WITH CHECK ADD CONSTRAINT [CK_Production_Product_UnitPrice]
		CHECK  ( [UnitPrice] >= 0 ) 
go

ALTER TABLE [Production].[Product]
	ADD CONSTRAINT [CK_Production_Product_Discontinued]
		CHECK  ( [Discontinued]=0 OR [Discontinued]=1 ) 
go

ALTER TABLE [Production].[Product]
	ADD CONSTRAINT [CK_Production_Product_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [Production].[Product]
	ADD CONSTRAINT [CK_Production_Product_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [Production].[Product] WITH CHECK 
	ADD CONSTRAINT [FK_Product_Category] FOREIGN KEY ([CategoryId]) REFERENCES [Production].[Category]([CategoryId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Production].[Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Product_Category]
go

ALTER TABLE [Production].[Product] WITH CHECK 
	ADD CONSTRAINT [FK_Product_Supplier] FOREIGN KEY ([SupplierId]) REFERENCES [Production].[Supplier]([SupplierId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Production].[Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Product_Supplier]
go

ALTER TABLE [Production].[Product]
	ADD CONSTRAINT [FK_Production.Product_DbSecurity.UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Sales].[Shipper]
	ADD CONSTRAINT [CK_Sales_Shipper_PhoneNumber]
		CHECK  ( [PhoneNumber] LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' ) 
go

ALTER TABLE [Sales].[Shipper]
	ADD CONSTRAINT [CK_Sales_Shipper_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [Sales].[Shipper]
	ADD CONSTRAINT [CK_Sales_Shipper_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [Sales].[Shipper]
	ADD CONSTRAINT [FK_Sales.Shipper_DbSecurity.UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Production].[Supplier]
	ADD CONSTRAINT [CK_Production_Supplier_PostalCode]
		CHECK  ( [SupplierPostalCode] LIKE '[0-9][0-9][0-9][0-9][0-9]'
 ) 
go

ALTER TABLE [Production].[Supplier]
	ADD CONSTRAINT [CK_Production_Supplier_SupplierPhoneNumber]
		CHECK  ( [SupplierPhoneNumber] LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' ) 
go

ALTER TABLE [Production].[Supplier]
	ADD CONSTRAINT [CK_Production_Supplier_SupplierFaxNumber]
		CHECK  ( [SupplierFaxNumber] LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' ) 
go

ALTER TABLE [Production].[Supplier]
	ADD CONSTRAINT [CK_Production_Supplier_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [Production].[Supplier]
	ADD CONSTRAINT [CK_Production_Supplier_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go


ALTER TABLE [Production].[Supplier]
	ADD CONSTRAINT [FK_Production.Supplier_DbSecurity.UserAuthorization] FOREIGN KEY ([UserAuthorizationId]) REFERENCES [DbSecurity].[UserAuthorization]([UserAuthorizationId])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [DbSecurity].[UserAuthorization]
	ADD CONSTRAINT [CK_DbSecurity_UserAuthorization_ClassTime]
		CHECK  ( [ClassTime] LIKE '[0-1][0-9]:[0-5][0-9]'
OR
[ClassTime] LIKE '[0-2][0-4]:[0-5][0-9]' ) 
go

ALTER TABLE [DbSecurity].[UserAuthorization]
	ADD CONSTRAINT [CK_DbSecurity_UserAuthorization_DateAdded]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

ALTER TABLE [DbSecurity].[UserAuthorization]
	ADD CONSTRAINT [CK_DbSecurity_UserAuthorization_DateOfLastUpdate]
		CHECK  ( DateOfLastUpdate >= DateAdded ) 
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for employee IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeeObjectId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The last name of an employee.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeeLastName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The first name of an employee',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeeFirstName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The title/role of an employee.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeeTitle'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The title of courtesy of an employee.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeeTitleOfCourtesy'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The birthdate of an employee.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'BirthDate'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The hiredate of an employee.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'HireDate'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The street address of an employee.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeeAddress'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The city of an employee.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeeCity'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The state/region of an employee.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeeRegion'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The postal code of an employee.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeePostalCode'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The country of an employee.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeeCountry'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The phone number of an employee.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeePhoneNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The identifier for an employee''s manager.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_HumanResourcesEmployee',
@level2type = 'COLUMN', @level2name = 'EmployeeManagerId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for category IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionCategory',
@level2type = 'COLUMN', @level2name = 'CategoryObjectId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The name of a product category.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionCategory',
@level2type = 'COLUMN', @level2name = 'CategoryName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The description of a product''s category.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionCategory',
@level2type = 'COLUMN', @level2name = 'Description'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for Product IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionProduct',
@level2type = 'COLUMN', @level2name = 'ProductObjectId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The name of a product.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionProduct',
@level2type = 'COLUMN', @level2name = 'ProductName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for supplier IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionProduct',
@level2type = 'COLUMN', @level2name = 'SupplierId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for category IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionProduct',
@level2type = 'COLUMN', @level2name = 'CategoryId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The price per unit of a product.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionProduct',
@level2type = 'COLUMN', @level2name = 'UnitPrice'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A flag bit to indicate if a product has been discontinued.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionProduct',
@level2type = 'COLUMN', @level2name = 'Discontinued'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for supplier IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionSupplier',
@level2type = 'COLUMN', @level2name = 'SupplierObjectId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The company name of a supplier.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionSupplier',
@level2type = 'COLUMN', @level2name = 'SupplierCompanyName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The full name of a contact at the supplier company.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionSupplier',
@level2type = 'COLUMN', @level2name = 'SupplierContactName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The title of a contact at the supplier company.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionSupplier',
@level2type = 'COLUMN', @level2name = 'SupplierContactTitle'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The street address of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionSupplier',
@level2type = 'COLUMN', @level2name = 'SupplierAddress'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The city of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionSupplier',
@level2type = 'COLUMN', @level2name = 'SupplierCity'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The state/region of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionSupplier',
@level2type = 'COLUMN', @level2name = 'SupplierRegion'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The postal code of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionSupplier',
@level2type = 'COLUMN', @level2name = 'SupplierPostalCode'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The country of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionSupplier',
@level2type = 'COLUMN', @level2name = 'SupplierCountry'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The phone number of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionSupplier',
@level2type = 'COLUMN', @level2name = 'SupplierPhoneNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The fax number of a supplier company.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_ProductionSupplier',
@level2type = 'COLUMN', @level2name = 'SupplierFaxNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'Unique identifier of customer IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesCustomer',
@level2type = 'COLUMN', @level2name = 'CustomerObjectId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The company name of a customer business.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesCustomer',
@level2type = 'COLUMN', @level2name = 'CustomerCompanyName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The full contact name of a customer.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesCustomer',
@level2type = 'COLUMN', @level2name = 'CustomerContactName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The street address of a customer.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesCustomer',
@level2type = 'COLUMN', @level2name = 'CustomerAddress'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The city of a customer.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesCustomer',
@level2type = 'COLUMN', @level2name = 'CustomerCity'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The state/region of a customer.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesCustomer',
@level2type = 'COLUMN', @level2name = 'CustomerRegion'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The postal code of a customer.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesCustomer',
@level2type = 'COLUMN', @level2name = 'CustomerPostalCode'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The country of a customer.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesCustomer',
@level2type = 'COLUMN', @level2name = 'CustomerCountry'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The fax number of a customer.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesCustomer',
@level2type = 'COLUMN', @level2name = 'CustomerFaxNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for shipper IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesShipper',
@level2type = 'COLUMN', @level2name = 'ShipperObjectId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The name of the shipping company.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesShipper',
@level2type = 'COLUMN', @level2name = 'ShipperCompanyName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The phone number of the shipping company.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_SalesShipper',
@level2type = 'COLUMN', @level2name = 'PhoneNumber'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier of order IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'OrderId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'Unique identifier of customer IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'CustomerId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The unique identifier for employee IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'EmployeeId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for shipper IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'ShipperId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date of an order.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'OrderDate'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an order is required by.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'RequiredDate'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The date an order is shipped to a customer.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'ShipToDate'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The cost of freight.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'Freight'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The name of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'ShipToName'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The street address of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'ShipToAddress'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The city of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'ShipToCity'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The state/region of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'ShipToRegion'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The postal code of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'ShipToPostalCode'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The country of a recipient the shipment will be delivered to.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_Order',
@level2type = 'COLUMN', @level2name = 'ShipToCountry'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for Order IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_OrderDetail',
@level2type = 'COLUMN', @level2name = 'OrderId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A unique identifier for Product IDs.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_OrderDetail',
@level2type = 'COLUMN', @level2name = 'ProductId'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The price per unit of a product purchased.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_OrderDetail',
@level2type = 'COLUMN', @level2name = 'UnitPrice'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'The quantity of product purchased.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_OrderDetail',
@level2type = 'COLUMN', @level2name = 'Quantity'
go

EXEC sp_addextendedproperty
@name = 'MS_Description', @value = 'A percentage of discount applied to the price of product purchased.',
@level0type = 'SCHEMA', @level0name = 'JsonOutput',
@level1type = 'VIEW', @level1name = 'uvw_OrderDetail',
@level2type = 'COLUMN', @level2name = 'DiscountPercentage'
go

CREATE TRIGGER Triggered.tD_AuditTriggeredEmployeeHistory ON Triggered.AuditTriggeredEmployeeHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on AuditTriggeredEmployeeHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  Triggered.AuditTriggeredEmployeeHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003de8c", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Triggered", CHILD_TABLE="AuditTriggeredEmployeeHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_AuditTriggeredEmployeeHistory_Employee", FK_COLUMNS="EmployeeId" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Employee," = "," AND") */
        deleted.EmployeeId = HumanResources.Employee.EmployeeId AND
        NOT EXISTS (
          SELECT * FROM Triggered.AuditTriggeredEmployeeHistory
          WHERE
            /* %JoinFKPK(Triggered.AuditTriggeredEmployeeHistory,HumanResources.Employee," = "," AND") */
            Triggered.AuditTriggeredEmployeeHistory.EmployeeId = HumanResources.Employee.EmployeeId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Triggered.AuditTriggeredEmployeeHistory because HumanResources.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Triggered.AuditTriggeredEmployeeHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Triggered", CHILD_TABLE="AuditTriggeredEmployeeHistory"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_AuditTriggeredEmployeeHistory_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM Triggered.AuditTriggeredEmployeeHistory
          WHERE
            /* %JoinFKPK(Triggered.AuditTriggeredEmployeeHistory,DbSecurity.UserAuthorization," = "," AND") */
            Triggered.AuditTriggeredEmployeeHistory.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Triggered.AuditTriggeredEmployeeHistory because DbSecurity.UserAuthorization exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Triggered.tU_AuditTriggeredEmployeeHistory ON Triggered.AuditTriggeredEmployeeHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on AuditTriggeredEmployeeHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insTriggeredEmployeeHistoryId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* HumanResources.Employee  Triggered.AuditTriggeredEmployeeHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0003e6b2", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Triggered", CHILD_TABLE="AuditTriggeredEmployeeHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_AuditTriggeredEmployeeHistory_Employee", FK_COLUMNS="EmployeeId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(EmployeeId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Employee
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Employee) */
          inserted.EmployeeId = HumanResources.Employee.EmployeeId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.EmployeeId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Triggered.AuditTriggeredEmployeeHistory because HumanResources.Employee does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Triggered.AuditTriggeredEmployeeHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Triggered", CHILD_TABLE="AuditTriggeredEmployeeHistory"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_AuditTriggeredEmployeeHistory_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Triggered.AuditTriggeredEmployeeHistory because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Category ON Production.Category FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Category */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Category describes a Production.Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000317de", PARENT_OWNER="Production", PARENT_TABLE="Category"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="describes a", C2P_VERB_PHRASE="is described by", 
    FK_CONSTRAINT="FK_Product_Category", FK_COLUMNS="CategoryId" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.CategoryId = deleted.CategoryId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Category because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Production.Category on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Category"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Category_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM Production.Category
          WHERE
            /* %JoinFKPK(Production.Category,DbSecurity.UserAuthorization," = "," AND") */
            Production.Category.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Category because DbSecurity.UserAuthorization exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Category ON Production.Category FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Category */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCategoryId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Category describes a Production.Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0003507e", PARENT_OWNER="Production", PARENT_TABLE="Category"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="describes a", C2P_VERB_PHRASE="is described by", 
    FK_CONSTRAINT="FK_Product_Category", FK_COLUMNS="CategoryId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CategoryId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.CategoryId = deleted.CategoryId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Category because Production.Product exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Production.Category on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Category"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Category_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Category because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_Customer ON Sales.Customer FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Customer */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.Customer creates an Sales.Order on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002d82c", PARENT_OWNER="Sales", PARENT_TABLE="Customer"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="creates an", C2P_VERB_PHRASE="is created by", 
    FK_CONSTRAINT="FK_Order_Customer", FK_COLUMNS="CustomerId" */
    IF EXISTS (
      SELECT * FROM deleted,[Sales].[Order]
      WHERE
        /*  %JoinFKPK(Sales.Order,deleted," = "," AND") */
        [Sales].[Order].CustomerId = deleted.CustomerId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.Customer because Sales.Order exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Sales.Customer on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Customer_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM Sales.Customer
          WHERE
            /* %JoinFKPK(Sales.Customer,DbSecurity.UserAuthorization," = "," AND") */
            Sales.Customer.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.Customer because DbSecurity.UserAuthorization exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_Customer ON Sales.Customer FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Customer */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCustomerId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.Customer creates an Sales.Order on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0003303e", PARENT_OWNER="Sales", PARENT_TABLE="Customer"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="creates an", C2P_VERB_PHRASE="is created by", 
    FK_CONSTRAINT="FK_Order_Customer", FK_COLUMNS="CustomerId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustomerId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,[Sales].[Order]
      WHERE
        /*  %JoinFKPK(Sales.Order,deleted," = "," AND") */
        [Sales].[Order].CustomerId = deleted.CustomerId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.Customer because Sales.Order exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Sales.Customer on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Customer_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.Customer because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tD_Employee ON HumanResources.Employee FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Employee */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  Triggered.Employee on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000a1302", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Triggered", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TriggeredEmployee_Employee", FK_COLUMNS="EmployeeId" */
    IF EXISTS (
      SELECT * FROM deleted,Triggered.Employee
      WHERE
        /*  %JoinFKPK(Triggered.Employee,deleted," = "," AND") */
        Triggered.Employee.EmployeeId = deleted.EmployeeId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Employee because Triggered.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* HumanResources.Employee  SystemVersioned.Employee on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="SystemVersioned", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SystemVersionedEmployee_Employee", FK_COLUMNS="EmployeeId" */
    IF EXISTS (
      SELECT * FROM deleted,SystemVersioned.Employee
      WHERE
        /*  %JoinFKPK(SystemVersioned.Employee,deleted," = "," AND") */
        SystemVersioned.Employee.EmployeeId = deleted.EmployeeId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Employee because SystemVersioned.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* HumanResources.Employee  Triggered.AuditTriggeredEmployeeHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Triggered", CHILD_TABLE="AuditTriggeredEmployeeHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_AuditTriggeredEmployeeHistory_Employee", FK_COLUMNS="EmployeeId" */
    IF EXISTS (
      SELECT * FROM deleted,Triggered.AuditTriggeredEmployeeHistory
      WHERE
        /*  %JoinFKPK(Triggered.AuditTriggeredEmployeeHistory,deleted," = "," AND") */
        Triggered.AuditTriggeredEmployeeHistory.EmployeeId = deleted.EmployeeId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Employee because Triggered.AuditTriggeredEmployeeHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* HumanResources.Employee processes an Sales.Order on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="processes an", C2P_VERB_PHRASE="is processed by", 
    FK_CONSTRAINT="FK_Order_Employee", FK_COLUMNS="EmployeeId" */
    IF EXISTS (
      SELECT * FROM deleted,[Sales].[Order]
      WHERE
        /*  %JoinFKPK(Sales.Order,deleted," = "," AND") */
       [Sales].[Order].EmployeeId = deleted.EmployeeId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Employee because Sales.Order exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* HumanResources.Employee manages HumanResources.Employee on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="manages", C2P_VERB_PHRASE="is managed by", 
    FK_CONSTRAINT="FK_Employee_Employee", FK_COLUMNS="EmployeeManagerId" */
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /*  %JoinFKPK(HumanResources.Employee,deleted," = "," AND") */
        HumanResources.Employee.EmployeeManagerId = deleted.EmployeeId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Employee because HumanResources.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes HumanResources.Employee on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Employee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM HumanResources.Employee
          WHERE
            /* %JoinFKPK(HumanResources.Employee,DbSecurity.UserAuthorization," = "," AND") */
            HumanResources.Employee.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last HumanResources.Employee because DbSecurity.UserAuthorization exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* HumanResources.Employee manages HumanResources.Employee on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="manages", C2P_VERB_PHRASE="is managed by", 
    FK_CONSTRAINT="FK_Employee_Employee", FK_COLUMNS="EmployeeManagerId" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Employee," = "," AND") */
        deleted.EmployeeManagerId = HumanResources.Employee.EmployeeId AND
        NOT EXISTS (
          SELECT * FROM HumanResources.Employee
          WHERE
            /* %JoinFKPK(HumanResources.Employee,HumanResources.Employee," = "," AND") */
            HumanResources.Employee.EmployeeManagerId = HumanResources.Employee.EmployeeId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last HumanResources.Employee because HumanResources.Employee exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tU_Employee ON HumanResources.Employee FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Employee */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insEmployeeId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* HumanResources.Employee  Triggered.Employee on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000aaee0", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Triggered", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TriggeredEmployee_Employee", FK_COLUMNS="EmployeeId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(EmployeeId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Triggered.Employee
      WHERE
        /*  %JoinFKPK(Triggered.Employee,deleted," = "," AND") */
        Triggered.Employee.EmployeeId = deleted.EmployeeId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Employee because Triggered.Employee exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee  SystemVersioned.Employee on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="SystemVersioned", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SystemVersionedEmployee_Employee", FK_COLUMNS="EmployeeId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(EmployeeId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SystemVersioned.Employee
      WHERE
        /*  %JoinFKPK(SystemVersioned.Employee,deleted," = "," AND") */
        SystemVersioned.Employee.EmployeeId = deleted.EmployeeId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Employee because SystemVersioned.Employee exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee  Triggered.AuditTriggeredEmployeeHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Triggered", CHILD_TABLE="AuditTriggeredEmployeeHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_AuditTriggeredEmployeeHistory_Employee", FK_COLUMNS="EmployeeId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(EmployeeId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Triggered.AuditTriggeredEmployeeHistory
      WHERE
        /*  %JoinFKPK(Triggered.AuditTriggeredEmployeeHistory,deleted," = "," AND") */
        Triggered.AuditTriggeredEmployeeHistory.EmployeeId = deleted.EmployeeId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Employee because Triggered.AuditTriggeredEmployeeHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee processes an Sales.Order on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="processes an", C2P_VERB_PHRASE="is processed by", 
    FK_CONSTRAINT="FK_Order_Employee", FK_COLUMNS="EmployeeId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(EmployeeId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,[Sales].[Order]
      WHERE
        /*  %JoinFKPK(Sales.Order,deleted," = "," AND") */
        [Sales].[Order].EmployeeId = deleted.EmployeeId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Employee because Sales.Order exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee manages HumanResources.Employee on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="manages", C2P_VERB_PHRASE="is managed by", 
    FK_CONSTRAINT="FK_Employee_Employee", FK_COLUMNS="EmployeeManagerId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(EmployeeId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /*  %JoinFKPK(HumanResources.Employee,deleted," = "," AND") */
        HumanResources.Employee.EmployeeManagerId = deleted.EmployeeId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Employee because HumanResources.Employee exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes HumanResources.Employee on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Employee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update HumanResources.Employee because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee manages HumanResources.Employee on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="manages", C2P_VERB_PHRASE="is managed by", 
    FK_CONSTRAINT="FK_Employee_Employee", FK_COLUMNS="EmployeeManagerId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(EmployeeManagerId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Employee
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Employee) */
          inserted.EmployeeManagerId = HumanResources.Employee.EmployeeId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.EmployeeManagerId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update HumanResources.Employee because HumanResources.Employee does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER SystemVersioned.Trigger_1363 ON SystemVersioned.Employee FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Employee */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  SystemVersioned.Employee on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003a89b", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="SystemVersioned", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SystemVersionedEmployee_Employee", FK_COLUMNS="EmployeeId" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Employee," = "," AND") */
        deleted.EmployeeId = HumanResources.Employee.EmployeeId AND
        NOT EXISTS (
          SELECT * FROM SystemVersioned.Employee
          WHERE
            /* %JoinFKPK(SystemVersioned.Employee,HumanResources.Employee," = "," AND") */
            SystemVersioned.Employee.EmployeeId = HumanResources.Employee.EmployeeId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SystemVersioned.Employee because HumanResources.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes SystemVersioned.Employee on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="SystemVersioned", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_SystemVersionedEmployee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM SystemVersioned.Employee
          WHERE
            /* %JoinFKPK(SystemVersioned.Employee,DbSecurity.UserAuthorization," = "," AND") */
            SystemVersioned.Employee.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SystemVersioned.Employee because DbSecurity.UserAuthorization exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER SystemVersioned.Trigger_1364 ON SystemVersioned.Employee FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Employee */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insEmployeeId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* HumanResources.Employee  SystemVersioned.Employee on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0003a57a", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="SystemVersioned", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SystemVersionedEmployee_Employee", FK_COLUMNS="EmployeeId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(EmployeeId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Employee
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Employee) */
          inserted.EmployeeId = HumanResources.Employee.EmployeeId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SystemVersioned.Employee because HumanResources.Employee does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes SystemVersioned.Employee on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="SystemVersioned", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_SystemVersionedEmployee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SystemVersioned.Employee because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Triggered.[uTdu_AuditTriggeredEmployeeHistory] ON Triggered.Employee
   WITH 
 EXECUTE AS CALLER  AFTER DELETE,UPDATE 
  
  AS

begin
			declare @action char(1) = 'I';
			declare @IsDeleted char(1) = 'N';
			declare @DeletedMessage char(25) = 'Rows has been deleted';
			declare @SysStartTimeAsSysEnd datetime2;
		   --
			if (exists (select * from inserted) and exists (select * from deleted))
			begin
				set @action = 'U';
				SELECT @SysStartTimeAsSysEnd = Inserted.SysStartTime FROM Inserted
			end;
			else if (exists (select * from deleted))
			begin
				set @action = 'D';
				set @IsDeleted = 'Y';
			end;
			else
				set @action = 'I';

			if (@action <> 'I')
				insert into Triggered.AuditTriggeredEmployeeHistory
				(
					AuditTriggeredEmployeeHistoryTimestamp
				  , TriggerOption
				  , EmployeeId
				  , EmployeeFullName
				  , Department
				  , Salary
				  , Notes
				  , IsDeleted
				  , TransactionNumber
				  , UserAuthenticatedKey
				  , TimestampRowChanged
				  , SysStartTime
				  , SysEndTime
				)
				select sysdatetime()       as AuditTriggeredEmployeeHistoryTimestamp
					 , @action             as TriggerOption
					 , EmployeeId
					 , EmployeeFullName
					 , Department
					 , Salary
					 , case
						   when @action <> 'D' then
							   Deleted.Notes
						   else
							   @DeletedMessage
					   end
					 , @IsDeleted          as IsDeleted
					 , Deleted.TransactionNumber
					 , UserAuthenticatedKey
					 , TimestampRowChanged
					 , Deleted.SysStartTime
					 , case
						   when @action <> 'D' then
							  @SysStartTimeAsSysEnd
						   else
							   sysdatetime()
					   end as SysEndTime
				from Deleted;
		end;

 
go


ENABLE TRIGGER [Triggered].[uTdu_AuditTriggeredEmployeeHistory] ON [Triggered].Employee
go

CREATE TRIGGER Triggered.Trigger_1374 ON Triggered.Employee FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Employee */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  Triggered.Employee on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00036b9f", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Triggered", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TriggeredEmployee_Employee", FK_COLUMNS="EmployeeId" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Employee," = "," AND") */
        deleted.EmployeeId = HumanResources.Employee.EmployeeId AND
        NOT EXISTS (
          SELECT * FROM Triggered.Employee
          WHERE
            /* %JoinFKPK(Triggered.Employee,HumanResources.Employee," = "," AND") */
            Triggered.Employee.EmployeeId = HumanResources.Employee.EmployeeId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Triggered.Employee because HumanResources.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Triggered.Employee on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Triggered", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_TriggeredEmployee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM Triggered.Employee
          WHERE
            /* %JoinFKPK(Triggered.Employee,DbSecurity.UserAuthorization," = "," AND") */
            Triggered.Employee.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Triggered.Employee because DbSecurity.UserAuthorization exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Triggered.Trigger_1375 ON Triggered.Employee FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Employee */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insEmployeeId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* HumanResources.Employee  Triggered.Employee on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00038603", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Triggered", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TriggeredEmployee_Employee", FK_COLUMNS="EmployeeId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(EmployeeId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Employee
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Employee) */
          inserted.EmployeeId = HumanResources.Employee.EmployeeId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Triggered.Employee because HumanResources.Employee does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Triggered.Employee on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Triggered", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_TriggeredEmployee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Triggered.Employee because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER DigitRepresentation.tD_Nums ON DigitRepresentation.Nums FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Nums */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes DigitRepresentation.Nums on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001de81", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="DigitRepresentation", CHILD_TABLE="Nums"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Nums_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM DigitRepresentation.Nums
          WHERE
            /* %JoinFKPK(DigitRepresentation.Nums,DbSecurity.UserAuthorization," = "," AND") */
            DigitRepresentation.Nums.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last DigitRepresentation.Nums because DbSecurity.UserAuthorization exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER DigitRepresentation.tU_Nums ON DigitRepresentation.Nums FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Nums */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insN sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes DigitRepresentation.Nums on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001eb4f", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="DigitRepresentation", CHILD_TABLE="Nums"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Nums_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update DigitRepresentation.Nums because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_Order ON [Sales].[Order] FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Order */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.Order is described by Sales.OrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000734fb", PARENT_OWNER="Sales", PARENT_TABLE="Order"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="is described by", C2P_VERB_PHRASE="describes an", 
    FK_CONSTRAINT="FK_OrderDetail_Order", FK_COLUMNS="OrderId" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.OrderDetail
      WHERE
        /*  %JoinFKPK(Sales.OrderDetail,deleted," = "," AND") */
        Sales.OrderDetail.OrderId = deleted.OrderId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.Order because Sales.OrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Sales.Order on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Sales.Order_DbSecurity.UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM [Sales].[Order]
          WHERE
            /* %JoinFKPK(Sales.Order,DbSecurity.UserAuthorization," = "," AND") */
            [Sales].[Order].UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.Order because DbSecurity.UserAuthorization exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.Shipper handles the shipment of an Sales.Order on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Shipper"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="handles the shipment of an", C2P_VERB_PHRASE="is shipped by", 
    FK_CONSTRAINT="FK_Order_Shipper", FK_COLUMNS="ShipperId" */
    IF EXISTS (SELECT * FROM deleted,Sales.Shipper
      WHERE
        /* %JoinFKPK(deleted,Sales.Shipper," = "," AND") */
        deleted.ShipperId = Sales.Shipper.ShipperId AND
        NOT EXISTS (
          SELECT * FROM [Sales].[Order]
          WHERE
            /* %JoinFKPK(Sales.Order,Sales.Shipper," = "," AND") */
            [Sales].[Order].ShipperId = Sales.Shipper.ShipperId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.Order because Sales.Shipper exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* HumanResources.Employee processes an Sales.Order on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="processes an", C2P_VERB_PHRASE="is processed by", 
    FK_CONSTRAINT="FK_Order_Employee", FK_COLUMNS="EmployeeId" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Employee," = "," AND") */
        deleted.EmployeeId = HumanResources.Employee.EmployeeId AND
        NOT EXISTS (
          SELECT * FROM [Sales].[Order]
          WHERE
            /* %JoinFKPK(Sales.Order,HumanResources.Employee," = "," AND") */
            [Sales].[Order].EmployeeId = HumanResources.Employee.EmployeeId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.Order because HumanResources.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.Customer creates an Sales.Order on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Customer"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="creates an", C2P_VERB_PHRASE="is created by", 
    FK_CONSTRAINT="FK_Order_Customer", FK_COLUMNS="CustomerId" */
    IF EXISTS (SELECT * FROM deleted,Sales.Customer
      WHERE
        /* %JoinFKPK(deleted,Sales.Customer," = "," AND") */
        deleted.CustomerId = Sales.Customer.CustomerId AND
        NOT EXISTS (
          SELECT * FROM [Sales].[Order]
          WHERE
            /* %JoinFKPK(Sales.Order,Sales.Customer," = "," AND") */
            [Sales].[Order].CustomerId = Sales.Customer.CustomerId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.Order because Sales.Customer exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_Order ON [Sales].[Order] FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Order */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insOrderId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.Order is described by Sales.OrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0007d12c", PARENT_OWNER="Sales", PARENT_TABLE="Order"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="is described by", C2P_VERB_PHRASE="describes an", 
    FK_CONSTRAINT="FK_OrderDetail_Order", FK_COLUMNS="OrderId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(OrderId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.OrderDetail
      WHERE
        /*  %JoinFKPK(Sales.OrderDetail,deleted," = "," AND") */
        Sales.OrderDetail.OrderId = deleted.OrderId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.Order because Sales.OrderDetail exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Sales.Order on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Sales.Order_DbSecurity.UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.Order because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.Shipper handles the shipment of an Sales.Order on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Shipper"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="handles the shipment of an", C2P_VERB_PHRASE="is shipped by", 
    FK_CONSTRAINT="FK_Order_Shipper", FK_COLUMNS="ShipperId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ShipperId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.Shipper
        WHERE
          /* %JoinFKPK(inserted,Sales.Shipper) */
          inserted.ShipperId = Sales.Shipper.ShipperId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.Order because Sales.Shipper does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee processes an Sales.Order on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="processes an", C2P_VERB_PHRASE="is processed by", 
    FK_CONSTRAINT="FK_Order_Employee", FK_COLUMNS="EmployeeId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(EmployeeId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Employee
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Employee) */
          inserted.EmployeeId = HumanResources.Employee.EmployeeId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.Order because HumanResources.Employee does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.Customer creates an Sales.Order on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Customer"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="creates an", C2P_VERB_PHRASE="is created by", 
    FK_CONSTRAINT="FK_Order_Customer", FK_COLUMNS="CustomerId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustomerId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.Customer
        WHERE
          /* %JoinFKPK(inserted,Sales.Customer) */
          inserted.CustomerId = Sales.Customer.CustomerId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.CustomerId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.Order because Sales.Customer does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_OrderDetail ON Sales.OrderDetail FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on OrderDetail */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Sales.OrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004a059", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_OrderDetail_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM Sales.OrderDetail
          WHERE
            /* %JoinFKPK(Sales.OrderDetail,DbSecurity.UserAuthorization," = "," AND") */
            Sales.OrderDetail.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.OrderDetail because DbSecurity.UserAuthorization exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product belongs to an Sales.OrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="belongs to an", C2P_VERB_PHRASE="has a", 
    FK_CONSTRAINT="FK_OrderDetail_Product", FK_COLUMNS="ProductId" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductId = Production.Product.ProductId AND
        NOT EXISTS (
          SELECT * FROM Sales.OrderDetail
          WHERE
            /* %JoinFKPK(Sales.OrderDetail,Production.Product," = "," AND") */
            Sales.OrderDetail.ProductId = Production.Product.ProductId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.OrderDetail because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.Order is described by Sales.OrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Order"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="is described by", C2P_VERB_PHRASE="describes an", 
    FK_CONSTRAINT="FK_OrderDetail_Order", FK_COLUMNS="OrderId" */
    IF EXISTS (SELECT * FROM deleted,[Sales].[Order]
      WHERE
        /* %JoinFKPK(deleted,Sales.Order," = "," AND") */
        deleted.OrderId = [Sales].[Order].OrderId AND
        NOT EXISTS (
          SELECT * FROM Sales.OrderDetail
          WHERE
            /* %JoinFKPK(Sales.OrderDetail,Sales.Order," = "," AND") */
            Sales.OrderDetail.OrderId = [Sales].[Order].OrderId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.OrderDetail because Sales.Order exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_OrderDetail ON Sales.OrderDetail FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on OrderDetail */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insOrderId sdKey.SurrogateKeyInt, 
           @insProductId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Sales.OrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004e833", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_OrderDetail_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.OrderDetail because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product belongs to an Sales.OrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="belongs to an", C2P_VERB_PHRASE="has a", 
    FK_CONSTRAINT="FK_OrderDetail_Product", FK_COLUMNS="ProductId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductId = Production.Product.ProductId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.OrderDetail because Production.Product does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.Order is described by Sales.OrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Order"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="is described by", C2P_VERB_PHRASE="describes an", 
    FK_CONSTRAINT="FK_OrderDetail_Order", FK_COLUMNS="OrderId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(OrderId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,[Sales].[Order]
        WHERE
          /* %JoinFKPK(inserted,Sales.Order) */
          inserted.OrderId = [Sales].[Order].OrderId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.OrderDetail because Sales.Order does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Product ON Production.Product FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Product */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product belongs to an Sales.OrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00061d5f", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="belongs to an", C2P_VERB_PHRASE="has a", 
    FK_CONSTRAINT="FK_OrderDetail_Product", FK_COLUMNS="ProductId" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.OrderDetail
      WHERE
        /*  %JoinFKPK(Sales.OrderDetail,deleted," = "," AND") */
        Sales.OrderDetail.ProductId = deleted.ProductId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Sales.OrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Production.Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Product_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM Production.Product
          WHERE
            /* %JoinFKPK(Production.Product,DbSecurity.UserAuthorization," = "," AND") */
            Production.Product.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Product because DbSecurity.UserAuthorization exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Supplier supplies a Production.Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Supplier"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="supplies a", C2P_VERB_PHRASE="is supplied by", 
    FK_CONSTRAINT="FK_Product_Supplier", FK_COLUMNS="SupplierId" */
    IF EXISTS (SELECT * FROM deleted,Production.Supplier
      WHERE
        /* %JoinFKPK(deleted,Production.Supplier," = "," AND") */
        deleted.SupplierId = Production.Supplier.SupplierId AND
        NOT EXISTS (
          SELECT * FROM Production.Product
          WHERE
            /* %JoinFKPK(Production.Product,Production.Supplier," = "," AND") */
            Production.Product.SupplierId = Production.Supplier.SupplierId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Product because Production.Supplier exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Category describes a Production.Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Category"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="describes a", C2P_VERB_PHRASE="is described by", 
    FK_CONSTRAINT="FK_Product_Category", FK_COLUMNS="CategoryId" */
    IF EXISTS (SELECT * FROM deleted,Production.Category
      WHERE
        /* %JoinFKPK(deleted,Production.Category," = "," AND") */
        deleted.CategoryId = Production.Category.CategoryId AND
        NOT EXISTS (
          SELECT * FROM Production.Product
          WHERE
            /* %JoinFKPK(Production.Product,Production.Category," = "," AND") */
            Production.Product.CategoryId = Production.Category.CategoryId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Product because Production.Category exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Product ON Production.Product FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Product */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product belongs to an Sales.OrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000653c6", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="belongs to an", C2P_VERB_PHRASE="has a", 
    FK_CONSTRAINT="FK_OrderDetail_Product", FK_COLUMNS="ProductId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.OrderDetail
      WHERE
        /*  %JoinFKPK(Sales.OrderDetail,deleted," = "," AND") */
        Sales.OrderDetail.ProductId = deleted.ProductId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Sales.OrderDetail exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Production.Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Product_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Product because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Supplier supplies a Production.Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Supplier"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="supplies a", C2P_VERB_PHRASE="is supplied by", 
    FK_CONSTRAINT="FK_Product_Supplier", FK_COLUMNS="SupplierId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SupplierId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Supplier
        WHERE
          /* %JoinFKPK(inserted,Production.Supplier) */
          inserted.SupplierId = Production.Supplier.SupplierId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Product because Production.Supplier does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Category describes a Production.Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Category"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="describes a", C2P_VERB_PHRASE="is described by", 
    FK_CONSTRAINT="FK_Product_Category", FK_COLUMNS="CategoryId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CategoryId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Category
        WHERE
          /* %JoinFKPK(inserted,Production.Category) */
          inserted.CategoryId = Production.Category.CategoryId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Product because Production.Category does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_Shipper ON Sales.Shipper FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Shipper */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.Shipper handles the shipment of an Sales.Order on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002dee5", PARENT_OWNER="Sales", PARENT_TABLE="Shipper"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="handles the shipment of an", C2P_VERB_PHRASE="is shipped by", 
    FK_CONSTRAINT="FK_Order_Shipper", FK_COLUMNS="ShipperId" */
    IF EXISTS (
      SELECT * FROM deleted,[Sales].[Order]
      WHERE
        /*  %JoinFKPK(Sales.Order,deleted," = "," AND") */
        [Sales].[Order].ShipperId = deleted.ShipperId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.Shipper because Sales.Order exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Sales.Shipper on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Shipper"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Shipper_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM Sales.Shipper
          WHERE
            /* %JoinFKPK(Sales.Shipper,DbSecurity.UserAuthorization," = "," AND") */
            Sales.Shipper.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.Shipper because DbSecurity.UserAuthorization exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_Shipper ON Sales.Shipper FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Shipper */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insShipperId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.Shipper handles the shipment of an Sales.Order on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00032f01", PARENT_OWNER="Sales", PARENT_TABLE="Shipper"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="handles the shipment of an", C2P_VERB_PHRASE="is shipped by", 
    FK_CONSTRAINT="FK_Order_Shipper", FK_COLUMNS="ShipperId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ShipperId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,[Sales].[Order]
      WHERE
        /*  %JoinFKPK(Sales.Order,deleted," = "," AND") */
        [Sales].[Order].ShipperId = deleted.ShipperId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.Shipper because Sales.Order exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Sales.Shipper on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Shipper"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Shipper_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.Shipper because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Supplier ON Production.Supplier FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Supplier */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Supplier supplies a Production.Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003097e", PARENT_OWNER="Production", PARENT_TABLE="Supplier"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="supplies a", C2P_VERB_PHRASE="is supplied by", 
    FK_CONSTRAINT="FK_Product_Supplier", FK_COLUMNS="SupplierId" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.SupplierId = deleted.SupplierId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Supplier because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Production.Supplier on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Supplier"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Supplier_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (SELECT * FROM deleted,DbSecurity.UserAuthorization
      WHERE
        /* %JoinFKPK(deleted,DbSecurity.UserAuthorization," = "," AND") */
        deleted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId AND
        NOT EXISTS (
          SELECT * FROM Production.Supplier
          WHERE
            /* %JoinFKPK(Production.Supplier,DbSecurity.UserAuthorization," = "," AND") */
            Production.Supplier.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Supplier because DbSecurity.UserAuthorization exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Supplier ON Production.Supplier FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Supplier */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSupplierId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Supplier supplies a Production.Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000348dc", PARENT_OWNER="Production", PARENT_TABLE="Supplier"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="supplies a", C2P_VERB_PHRASE="is supplied by", 
    FK_CONSTRAINT="FK_Product_Supplier", FK_COLUMNS="SupplierId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SupplierId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.SupplierId = deleted.SupplierId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Supplier because Production.Product exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Production.Supplier on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Supplier"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Supplier_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,DbSecurity.UserAuthorization
        WHERE
          /* %JoinFKPK(inserted,DbSecurity.UserAuthorization) */
          inserted.UserAuthorizationId = DbSecurity.UserAuthorization.UserAuthorizationId
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.UserAuthorizationId IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Supplier because DbSecurity.UserAuthorization does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER DbSecurity.tD_UserAuthorization ON DbSecurity.UserAuthorization FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on UserAuthorization */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes DigitRepresentation.Nums on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="001041ae", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="DigitRepresentation", CHILD_TABLE="Nums"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Nums_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,DigitRepresentation.Nums
      WHERE
        /*  %JoinFKPK(DigitRepresentation.Nums,deleted," = "," AND") */
        DigitRepresentation.Nums.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because DigitRepresentation.Nums exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Triggered.Employee on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Triggered", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_TriggeredEmployee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,Triggered.Employee
      WHERE
        /*  %JoinFKPK(Triggered.Employee,deleted," = "," AND") */
        Triggered.Employee.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because Triggered.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes SystemVersioned.Employee on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="SystemVersioned", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_SystemVersionedEmployee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,SystemVersioned.Employee
      WHERE
        /*  %JoinFKPK(SystemVersioned.Employee,deleted," = "," AND") */
        SystemVersioned.Employee.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because SystemVersioned.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Triggered.AuditTriggeredEmployeeHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Triggered", CHILD_TABLE="AuditTriggeredEmployeeHistory"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_AuditTriggeredEmployeeHistory_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,Triggered.AuditTriggeredEmployeeHistory
      WHERE
        /*  %JoinFKPK(Triggered.AuditTriggeredEmployeeHistory,deleted," = "," AND") */
        Triggered.AuditTriggeredEmployeeHistory.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because Triggered.AuditTriggeredEmployeeHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Sales.Order on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Sales.Order_DbSecurity.UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,[Sales].[Order]
      WHERE
        /*  %JoinFKPK(Sales.Order,deleted," = "," AND") */
        [Sales].[Order].UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because Sales.Order exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Sales.OrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_OrderDetail_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.OrderDetail
      WHERE
        /*  %JoinFKPK(Sales.OrderDetail,deleted," = "," AND") */
        Sales.OrderDetail.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because Sales.OrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Production.Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Product_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Production.Supplier on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Supplier"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Supplier_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Supplier
      WHERE
        /*  %JoinFKPK(Production.Supplier,deleted," = "," AND") */
        Production.Supplier.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because Production.Supplier exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Production.Category on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Category"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Category_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Category
      WHERE
        /*  %JoinFKPK(Production.Category,deleted," = "," AND") */
        Production.Category.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because Production.Category exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Sales.Shipper on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Shipper"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Shipper_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.Shipper
      WHERE
        /*  %JoinFKPK(Sales.Shipper,deleted," = "," AND") */
        Sales.Shipper.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because Sales.Shipper exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes HumanResources.Employee on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Employee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /*  %JoinFKPK(HumanResources.Employee,deleted," = "," AND") */
        HumanResources.Employee.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because HumanResources.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* DbSecurity.UserAuthorization authorizes Sales.Customer on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Customer_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.Customer
      WHERE
        /*  %JoinFKPK(Sales.Customer,deleted," = "," AND") */
        Sales.Customer.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete DbSecurity.UserAuthorization because Sales.Customer exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER DbSecurity.tU_UserAuthorization ON DbSecurity.UserAuthorization FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on UserAuthorization */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insUserAuthorizationId sdKey.SurrogateKeyInt,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes DigitRepresentation.Nums on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0011cf90", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="DigitRepresentation", CHILD_TABLE="Nums"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Nums_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,DigitRepresentation.Nums
      WHERE
        /*  %JoinFKPK(DigitRepresentation.Nums,deleted," = "," AND") */
        DigitRepresentation.Nums.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because DigitRepresentation.Nums exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Triggered.Employee on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Triggered", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_TriggeredEmployee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Triggered.Employee
      WHERE
        /*  %JoinFKPK(Triggered.Employee,deleted," = "," AND") */
        Triggered.Employee.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because Triggered.Employee exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes SystemVersioned.Employee on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="SystemVersioned", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_SystemVersionedEmployee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SystemVersioned.Employee
      WHERE
        /*  %JoinFKPK(SystemVersioned.Employee,deleted," = "," AND") */
        SystemVersioned.Employee.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because SystemVersioned.Employee exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Triggered.AuditTriggeredEmployeeHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Triggered", CHILD_TABLE="AuditTriggeredEmployeeHistory"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_AuditTriggeredEmployeeHistory_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Triggered.AuditTriggeredEmployeeHistory
      WHERE
        /*  %JoinFKPK(Triggered.AuditTriggeredEmployeeHistory,deleted," = "," AND") */
        Triggered.AuditTriggeredEmployeeHistory.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because Triggered.AuditTriggeredEmployeeHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Sales.Order on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Order"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Sales.Order_DbSecurity.UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,[Sales].[Order]
      WHERE
        /*  %JoinFKPK(Sales.Order,deleted," = "," AND") */
        [Sales].[Order].UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because Sales.Order exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Sales.OrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="OrderDetail"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_OrderDetail_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.OrderDetail
      WHERE
        /*  %JoinFKPK(Sales.OrderDetail,deleted," = "," AND") */
        Sales.OrderDetail.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because Sales.OrderDetail exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Production.Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Product_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because Production.Product exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Production.Supplier on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Supplier"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Supplier_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Supplier
      WHERE
        /*  %JoinFKPK(Production.Supplier,deleted," = "," AND") */
        Production.Supplier.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because Production.Supplier exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Production.Category on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Production", CHILD_TABLE="Category"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Category_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Category
      WHERE
        /*  %JoinFKPK(Production.Category,deleted," = "," AND") */
        Production.Category.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because Production.Category exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Sales.Shipper on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Shipper"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Shipper_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.Shipper
      WHERE
        /*  %JoinFKPK(Sales.Shipper,deleted," = "," AND") */
        Sales.Shipper.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because Sales.Shipper exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes HumanResources.Employee on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Employee_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /*  %JoinFKPK(HumanResources.Employee,deleted," = "," AND") */
        HumanResources.Employee.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because HumanResources.Employee exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* DbSecurity.UserAuthorization authorizes Sales.Customer on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="DbSecurity", PARENT_TABLE="UserAuthorization"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="authorizes", C2P_VERB_PHRASE="is authorized by", 
    FK_CONSTRAINT="FK_Customer_UserAuthorization", FK_COLUMNS="UserAuthorizationId" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UserAuthorizationId)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.Customer
      WHERE
        /*  %JoinFKPK(Sales.Customer,deleted," = "," AND") */
        Sales.Customer.UserAuthorizationId = deleted.UserAuthorizationId
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update DbSecurity.UserAuthorization because Sales.Customer exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go



